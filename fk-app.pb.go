// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fk-app.proto

/*
Package fk_app is a generated protocol buffer package.

It is generated from these files:
	fk-app.proto

It has these top-level messages:
	QueryCapabilities
	SensorCapabilities
	Capabilities
	ConfigureSensorQuery
	QueryDataSets
	DataSet
	DataSets
	DownloadDataSet
	Sample
	DataSetData
	QueryDataSet
	EraseDataSet
	WireMessageQuery
	Error
	WireMessageReply
*/
package fk_app

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueryType int32

const (
	QueryType_QUERY_NONE              QueryType = 0
	QueryType_QUERY_CAPABILITIES      QueryType = 1
	QueryType_QUEYR_CONFIGURE_SENSOR  QueryType = 2
	QueryType_QUERY_DATA_SETS         QueryType = 3
	QueryType_QUERY_DATA_SET          QueryType = 4
	QueryType_QUERY_DOWNLOAD_DATA_SET QueryType = 5
	QueryType_QUERY_ERASE_DATA_SET    QueryType = 6
)

var QueryType_name = map[int32]string{
	0: "QUERY_NONE",
	1: "QUERY_CAPABILITIES",
	2: "QUEYR_CONFIGURE_SENSOR",
	3: "QUERY_DATA_SETS",
	4: "QUERY_DATA_SET",
	5: "QUERY_DOWNLOAD_DATA_SET",
	6: "QUERY_ERASE_DATA_SET",
}
var QueryType_value = map[string]int32{
	"QUERY_NONE":              0,
	"QUERY_CAPABILITIES":      1,
	"QUEYR_CONFIGURE_SENSOR":  2,
	"QUERY_DATA_SETS":         3,
	"QUERY_DATA_SET":          4,
	"QUERY_DOWNLOAD_DATA_SET": 5,
	"QUERY_ERASE_DATA_SET":    6,
}

func (x QueryType) String() string {
	return proto.EnumName(QueryType_name, int32(x))
}
func (QueryType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ReplyType int32

const (
	ReplyType_REPLY_NONE         ReplyType = 0
	ReplyType_REPLY_SUCCESS      ReplyType = 1
	ReplyType_REPLY_ERROR        ReplyType = 2
	ReplyType_REPLY_CAPABILITIES ReplyType = 3
	ReplyType_REPLY_DATA_SETS    ReplyType = 4
	ReplyType_REPLY_DATA_SET     ReplyType = 5
)

var ReplyType_name = map[int32]string{
	0: "REPLY_NONE",
	1: "REPLY_SUCCESS",
	2: "REPLY_ERROR",
	3: "REPLY_CAPABILITIES",
	4: "REPLY_DATA_SETS",
	5: "REPLY_DATA_SET",
}
var ReplyType_value = map[string]int32{
	"REPLY_NONE":         0,
	"REPLY_SUCCESS":      1,
	"REPLY_ERROR":        2,
	"REPLY_CAPABILITIES": 3,
	"REPLY_DATA_SETS":    4,
	"REPLY_DATA_SET":     5,
}

func (x ReplyType) String() string {
	return proto.EnumName(ReplyType_name, int32(x))
}
func (ReplyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type QueryCapabilities struct {
	Version uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (m *QueryCapabilities) Reset()                    { *m = QueryCapabilities{} }
func (m *QueryCapabilities) String() string            { return proto.CompactTextString(m) }
func (*QueryCapabilities) ProtoMessage()               {}
func (*QueryCapabilities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QueryCapabilities) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type SensorCapabilities struct {
	Id        uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Frequency uint32 `protobuf:"varint,3,opt,name=frequency" json:"frequency,omitempty"`
}

func (m *SensorCapabilities) Reset()                    { *m = SensorCapabilities{} }
func (m *SensorCapabilities) String() string            { return proto.CompactTextString(m) }
func (*SensorCapabilities) ProtoMessage()               {}
func (*SensorCapabilities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SensorCapabilities) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SensorCapabilities) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SensorCapabilities) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

type Capabilities struct {
	Version uint32                `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Name    string                `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Sensors []*SensorCapabilities `protobuf:"bytes,4,rep,name=sensors" json:"sensors,omitempty"`
}

func (m *Capabilities) Reset()                    { *m = Capabilities{} }
func (m *Capabilities) String() string            { return proto.CompactTextString(m) }
func (*Capabilities) ProtoMessage()               {}
func (*Capabilities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Capabilities) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Capabilities) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Capabilities) GetSensors() []*SensorCapabilities {
	if m != nil {
		return m.Sensors
	}
	return nil
}

type ConfigureSensorQuery struct {
	Id        uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Frequency uint32 `protobuf:"varint,2,opt,name=frequency" json:"frequency,omitempty"`
}

func (m *ConfigureSensorQuery) Reset()                    { *m = ConfigureSensorQuery{} }
func (m *ConfigureSensorQuery) String() string            { return proto.CompactTextString(m) }
func (*ConfigureSensorQuery) ProtoMessage()               {}
func (*ConfigureSensorQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ConfigureSensorQuery) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ConfigureSensorQuery) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

type QueryDataSets struct {
}

func (m *QueryDataSets) Reset()                    { *m = QueryDataSets{} }
func (m *QueryDataSets) String() string            { return proto.CompactTextString(m) }
func (*QueryDataSets) ProtoMessage()               {}
func (*QueryDataSets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DataSet struct {
	Id     uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Sensor uint32 `protobuf:"varint,2,opt,name=sensor" json:"sensor,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Size   uint32 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Time   uint64 `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
	Hash   uint32 `protobuf:"varint,6,opt,name=hash" json:"hash,omitempty"`
}

func (m *DataSet) Reset()                    { *m = DataSet{} }
func (m *DataSet) String() string            { return proto.CompactTextString(m) }
func (*DataSet) ProtoMessage()               {}
func (*DataSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DataSet) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DataSet) GetSensor() uint32 {
	if m != nil {
		return m.Sensor
	}
	return 0
}

func (m *DataSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataSet) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *DataSet) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *DataSet) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

// TODO: Paging?
type DataSets struct {
	DataSets []*DataSet `protobuf:"bytes,1,rep,name=dataSets" json:"dataSets,omitempty"`
}

func (m *DataSets) Reset()                    { *m = DataSets{} }
func (m *DataSets) String() string            { return proto.CompactTextString(m) }
func (*DataSets) ProtoMessage()               {}
func (*DataSets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DataSets) GetDataSets() []*DataSet {
	if m != nil {
		return m.DataSets
	}
	return nil
}

type DownloadDataSet struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Page uint32 `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
}

func (m *DownloadDataSet) Reset()                    { *m = DownloadDataSet{} }
func (m *DownloadDataSet) String() string            { return proto.CompactTextString(m) }
func (*DownloadDataSet) ProtoMessage()               {}
func (*DownloadDataSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DownloadDataSet) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DownloadDataSet) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type Sample struct {
	Time  uint64  `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value" json:"value,omitempty"`
}

func (m *Sample) Reset()                    { *m = Sample{} }
func (m *Sample) String() string            { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()               {}
func (*Sample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Sample) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Sample) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type DataSetData struct {
	Time    uint64    `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Samples []*Sample `protobuf:"bytes,2,rep,name=samples" json:"samples,omitempty"`
	Data    []float32 `protobuf:"fixed32,3,rep,packed,name=data" json:"data,omitempty"`
	Hash    uint32    `protobuf:"varint,4,opt,name=hash" json:"hash,omitempty"`
}

func (m *DataSetData) Reset()                    { *m = DataSetData{} }
func (m *DataSetData) String() string            { return proto.CompactTextString(m) }
func (*DataSetData) ProtoMessage()               {}
func (*DataSetData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DataSetData) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *DataSetData) GetSamples() []*Sample {
	if m != nil {
		return m.Samples
	}
	return nil
}

func (m *DataSetData) GetData() []float32 {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DataSetData) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

type QueryDataSet struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *QueryDataSet) Reset()                    { *m = QueryDataSet{} }
func (m *QueryDataSet) String() string            { return proto.CompactTextString(m) }
func (*QueryDataSet) ProtoMessage()               {}
func (*QueryDataSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *QueryDataSet) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type EraseDataSet struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *EraseDataSet) Reset()                    { *m = EraseDataSet{} }
func (m *EraseDataSet) String() string            { return proto.CompactTextString(m) }
func (*EraseDataSet) ProtoMessage()               {}
func (*EraseDataSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *EraseDataSet) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type WireMessageQuery struct {
	Type              QueryType             `protobuf:"varint,1,opt,name=type,enum=fk_app.QueryType" json:"type,omitempty"`
	QueryCapabilities *QueryCapabilities    `protobuf:"bytes,2,opt,name=queryCapabilities" json:"queryCapabilities,omitempty"`
	ConfigureSensor   *ConfigureSensorQuery `protobuf:"bytes,3,opt,name=configureSensor" json:"configureSensor,omitempty"`
	QueryDataSets     *QueryDataSets        `protobuf:"bytes,4,opt,name=queryDataSets" json:"queryDataSets,omitempty"`
	QueryDataSet      *QueryDataSet         `protobuf:"bytes,5,opt,name=queryDataSet" json:"queryDataSet,omitempty"`
	DownloadDataSet   *DownloadDataSet      `protobuf:"bytes,6,opt,name=downloadDataSet" json:"downloadDataSet,omitempty"`
	EraseDataSet      *EraseDataSet         `protobuf:"bytes,7,opt,name=eraseDataSet" json:"eraseDataSet,omitempty"`
}

func (m *WireMessageQuery) Reset()                    { *m = WireMessageQuery{} }
func (m *WireMessageQuery) String() string            { return proto.CompactTextString(m) }
func (*WireMessageQuery) ProtoMessage()               {}
func (*WireMessageQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *WireMessageQuery) GetType() QueryType {
	if m != nil {
		return m.Type
	}
	return QueryType_QUERY_NONE
}

func (m *WireMessageQuery) GetQueryCapabilities() *QueryCapabilities {
	if m != nil {
		return m.QueryCapabilities
	}
	return nil
}

func (m *WireMessageQuery) GetConfigureSensor() *ConfigureSensorQuery {
	if m != nil {
		return m.ConfigureSensor
	}
	return nil
}

func (m *WireMessageQuery) GetQueryDataSets() *QueryDataSets {
	if m != nil {
		return m.QueryDataSets
	}
	return nil
}

func (m *WireMessageQuery) GetQueryDataSet() *QueryDataSet {
	if m != nil {
		return m.QueryDataSet
	}
	return nil
}

func (m *WireMessageQuery) GetDownloadDataSet() *DownloadDataSet {
	if m != nil {
		return m.DownloadDataSet
	}
	return nil
}

func (m *WireMessageQuery) GetEraseDataSet() *EraseDataSet {
	if m != nil {
		return m.EraseDataSet
	}
	return nil
}

type Error struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type WireMessageReply struct {
	Type         ReplyType     `protobuf:"varint,1,opt,name=type,enum=fk_app.ReplyType" json:"type,omitempty"`
	Errors       []*Error      `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
	Capabilities *Capabilities `protobuf:"bytes,3,opt,name=capabilities" json:"capabilities,omitempty"`
	DataSets     *DataSets     `protobuf:"bytes,4,opt,name=dataSets" json:"dataSets,omitempty"`
	DataSetData  *DataSetData  `protobuf:"bytes,5,opt,name=dataSetData" json:"dataSetData,omitempty"`
}

func (m *WireMessageReply) Reset()                    { *m = WireMessageReply{} }
func (m *WireMessageReply) String() string            { return proto.CompactTextString(m) }
func (*WireMessageReply) ProtoMessage()               {}
func (*WireMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *WireMessageReply) GetType() ReplyType {
	if m != nil {
		return m.Type
	}
	return ReplyType_REPLY_NONE
}

func (m *WireMessageReply) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *WireMessageReply) GetCapabilities() *Capabilities {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *WireMessageReply) GetDataSets() *DataSets {
	if m != nil {
		return m.DataSets
	}
	return nil
}

func (m *WireMessageReply) GetDataSetData() *DataSetData {
	if m != nil {
		return m.DataSetData
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryCapabilities)(nil), "fk_app.QueryCapabilities")
	proto.RegisterType((*SensorCapabilities)(nil), "fk_app.SensorCapabilities")
	proto.RegisterType((*Capabilities)(nil), "fk_app.Capabilities")
	proto.RegisterType((*ConfigureSensorQuery)(nil), "fk_app.ConfigureSensorQuery")
	proto.RegisterType((*QueryDataSets)(nil), "fk_app.QueryDataSets")
	proto.RegisterType((*DataSet)(nil), "fk_app.DataSet")
	proto.RegisterType((*DataSets)(nil), "fk_app.DataSets")
	proto.RegisterType((*DownloadDataSet)(nil), "fk_app.DownloadDataSet")
	proto.RegisterType((*Sample)(nil), "fk_app.Sample")
	proto.RegisterType((*DataSetData)(nil), "fk_app.DataSetData")
	proto.RegisterType((*QueryDataSet)(nil), "fk_app.QueryDataSet")
	proto.RegisterType((*EraseDataSet)(nil), "fk_app.EraseDataSet")
	proto.RegisterType((*WireMessageQuery)(nil), "fk_app.WireMessageQuery")
	proto.RegisterType((*Error)(nil), "fk_app.Error")
	proto.RegisterType((*WireMessageReply)(nil), "fk_app.WireMessageReply")
	proto.RegisterEnum("fk_app.QueryType", QueryType_name, QueryType_value)
	proto.RegisterEnum("fk_app.ReplyType", ReplyType_name, ReplyType_value)
}

func init() { proto.RegisterFile("fk-app.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 789 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x6e, 0xea, 0x46,
	0x10, 0xae, 0x7f, 0x80, 0xc3, 0x98, 0x1f, 0xb3, 0x87, 0x72, 0xdc, 0x34, 0xaa, 0xa8, 0xa5, 0x48,
	0x28, 0x6d, 0x72, 0xe1, 0x36, 0x6a, 0xa5, 0x5e, 0x51, 0x70, 0x22, 0xa4, 0x14, 0x92, 0x35, 0x34,
	0xca, 0x15, 0x72, 0xc2, 0x92, 0x58, 0x01, 0xec, 0xd8, 0x90, 0x8a, 0x5e, 0xb5, 0x4f, 0xd4, 0x37,
	0xe8, 0xab, 0xb5, 0xda, 0x5d, 0xff, 0x2d, 0x10, 0xe9, 0x5c, 0x79, 0x67, 0xe6, 0x9b, 0xd9, 0x6f,
	0x66, 0xbe, 0x05, 0xa8, 0xcc, 0x5f, 0xce, 0xdc, 0x20, 0x38, 0x0f, 0x42, 0x7f, 0xed, 0xa3, 0xe2,
	0xfc, 0x65, 0xea, 0x06, 0x81, 0x79, 0x06, 0x8d, 0xdb, 0x0d, 0x09, 0xb7, 0x3d, 0x37, 0x70, 0x1f,
	0xbc, 0x85, 0xb7, 0xf6, 0x48, 0x84, 0x0c, 0x28, 0xbd, 0x91, 0x30, 0xf2, 0xfc, 0x95, 0x21, 0xb5,
	0xa5, 0x4e, 0x15, 0x27, 0xa6, 0xf9, 0x3b, 0x20, 0x87, 0xac, 0x22, 0x3f, 0x14, 0xf0, 0x35, 0x90,
	0xbd, 0x59, 0x0c, 0x95, 0xbd, 0x19, 0x42, 0xa0, 0xae, 0xdc, 0x25, 0x31, 0xe4, 0xb6, 0xd4, 0x29,
	0x63, 0x76, 0x46, 0xc7, 0x50, 0x9e, 0x87, 0xe4, 0x75, 0x43, 0x56, 0x8f, 0x5b, 0x43, 0x61, 0xd0,
	0xcc, 0x61, 0x86, 0x50, 0xf9, 0x3c, 0x06, 0x69, 0x6d, 0x25, 0x57, 0xfb, 0x47, 0x28, 0x45, 0x8c,
	0x55, 0x64, 0xa8, 0x6d, 0xa5, 0xa3, 0x59, 0x47, 0xe7, 0xbc, 0xbd, 0xf3, 0x7d, 0xb2, 0x38, 0x81,
	0x9a, 0x7d, 0x68, 0xf6, 0xfc, 0xd5, 0xdc, 0x7b, 0xda, 0x84, 0x84, 0xe3, 0xd8, 0x24, 0xf6, 0xba,
	0x11, 0x98, 0xcb, 0xbb, 0xcc, 0xeb, 0x50, 0x65, 0x69, 0x7d, 0x77, 0xed, 0x3a, 0x64, 0x1d, 0x99,
	0x7f, 0x4b, 0x50, 0x8a, 0x8d, 0xbd, 0x52, 0x2d, 0x28, 0xf2, 0xdb, 0xe3, 0x3a, 0xb1, 0x75, 0xb0,
	0x29, 0x04, 0x6a, 0xe4, 0xfd, 0x49, 0x0c, 0x95, 0x21, 0xd9, 0x99, 0xfa, 0xd6, 0xde, 0x92, 0x18,
	0x85, 0xb6, 0xd4, 0x51, 0x31, 0x3b, 0x53, 0xdf, 0xb3, 0x1b, 0x3d, 0x1b, 0x45, 0x8e, 0xa3, 0x67,
	0xf3, 0x27, 0xf8, 0x90, 0xf0, 0x41, 0xdf, 0xc1, 0x87, 0x59, 0x7c, 0x36, 0x24, 0x36, 0x9d, 0x7a,
	0x32, 0x9d, 0x18, 0x83, 0x53, 0x80, 0x79, 0x01, 0xf5, 0xbe, 0xff, 0xc7, 0x6a, 0xe1, 0xbb, 0xb3,
	0xf7, 0x7a, 0x40, 0xa0, 0x06, 0xee, 0x13, 0x89, 0x3b, 0x60, 0x67, 0xd3, 0x82, 0xa2, 0xe3, 0x2e,
	0x83, 0x45, 0xc6, 0x50, 0xca, 0x31, 0x6c, 0x42, 0xe1, 0xcd, 0x5d, 0x6c, 0x78, 0x8a, 0x8c, 0xb9,
	0x61, 0x46, 0xa0, 0xc5, 0x57, 0xd0, 0xcf, 0xc1, 0xc4, 0x0e, 0x94, 0x22, 0x56, 0x36, 0x32, 0x64,
	0xc6, 0xbc, 0x96, 0xee, 0x95, 0xb9, 0x71, 0x12, 0xa6, 0xd9, 0xb4, 0x07, 0x43, 0x69, 0x2b, 0x1d,
	0x19, 0xb3, 0x73, 0x3a, 0x18, 0x35, 0x37, 0x98, 0x6f, 0xa0, 0x92, 0xdf, 0xd6, 0x6e, 0x73, 0x34,
	0x6e, 0x87, 0x6e, 0x44, 0xde, 0x8b, 0xff, 0xab, 0x80, 0x7e, 0xe7, 0x85, 0xe4, 0x37, 0x12, 0x45,
	0xee, 0x13, 0xe1, 0x82, 0x39, 0x01, 0x75, 0xbd, 0x0d, 0x38, 0xf5, 0x9a, 0xd5, 0x48, 0x38, 0xb2,
	0xe0, 0x78, 0x1b, 0x10, 0xcc, 0xc2, 0xe8, 0x0a, 0x1a, 0xaf, 0xbb, 0x4f, 0x8d, 0x8d, 0x44, 0xb3,
	0xbe, 0x12, 0x72, 0x04, 0xb9, 0xee, 0xe7, 0xa0, 0x4b, 0xa8, 0x3f, 0x8a, 0xc2, 0x65, 0xc2, 0xd1,
	0xac, 0xe3, 0xa4, 0xcc, 0x21, 0x5d, 0xe3, 0xdd, 0x24, 0xf4, 0x0b, 0x54, 0x5f, 0xf3, 0xd2, 0x65,
	0x93, 0xd2, 0xac, 0x2f, 0x05, 0x32, 0x49, 0x10, 0x8b, 0x58, 0xf4, 0x33, 0x54, 0xf2, 0x0e, 0x26,
	0x49, 0xcd, 0x6a, 0x1e, 0xca, 0xc5, 0x02, 0x12, 0x75, 0xa1, 0x3e, 0x13, 0x35, 0xc6, 0xb4, 0xab,
	0x59, 0x9f, 0x52, 0x5d, 0x8a, 0x61, 0xbc, 0x8b, 0xa7, 0x97, 0x93, 0xdc, 0x9a, 0x8c, 0x92, 0x78,
	0x79, 0x7e, 0x85, 0x58, 0x40, 0x9a, 0xdf, 0x42, 0xc1, 0x0e, 0x43, 0x3f, 0xa4, 0xbf, 0x30, 0x4b,
	0xbe, 0x44, 0xb6, 0xb7, 0x32, 0x4e, 0x4c, 0xf3, 0x3f, 0x49, 0xd8, 0x31, 0x26, 0xc1, 0xe2, 0xdd,
	0x1d, 0xb3, 0x60, 0x6e, 0xc7, 0x27, 0x50, 0x24, 0xb4, 0x7c, 0x22, 0xd8, 0x6a, 0x46, 0x29, 0xf4,
	0x43, 0x1c, 0x07, 0x29, 0xff, 0xc7, 0xbc, 0x0a, 0x14, 0x91, 0xbf, 0x20, 0x00, 0x01, 0x89, 0xbe,
	0xcf, 0xbd, 0x66, 0xbe, 0x2e, 0x7d, 0xe7, 0x35, 0x47, 0xd9, 0x73, 0x46, 0x17, 0xa0, 0xcd, 0xb2,
	0x37, 0x16, 0xef, 0xe8, 0xe3, 0x4e, 0x02, 0xfd, 0xe0, 0x3c, 0xee, 0xf4, 0x1f, 0x09, 0xca, 0xa9,
	0x7a, 0x51, 0x0d, 0xe0, 0x76, 0x62, 0xe3, 0xfb, 0xe9, 0x70, 0x34, 0xb4, 0xf5, 0x2f, 0x50, 0x0b,
	0x10, 0xb7, 0x7b, 0xdd, 0x9b, 0xee, 0xaf, 0x83, 0xeb, 0xc1, 0x78, 0x60, 0x3b, 0xba, 0x84, 0x8e,
	0xa0, 0x75, 0x3b, 0xb1, 0xef, 0xf1, 0xb4, 0x37, 0x1a, 0x5e, 0x0e, 0xae, 0x26, 0xd8, 0x9e, 0x3a,
	0xf6, 0xd0, 0x19, 0x61, 0x5d, 0x46, 0x1f, 0xa1, 0xce, 0x73, 0xfa, 0xdd, 0x71, 0x77, 0xea, 0xd8,
	0x63, 0x47, 0x57, 0x10, 0x82, 0x9a, 0xe8, 0xd4, 0x55, 0xf4, 0x35, 0x7c, 0x8a, 0x7d, 0xa3, 0xbb,
	0xe1, 0xf5, 0xa8, 0xdb, 0xcf, 0x82, 0x05, 0x64, 0x40, 0x93, 0x07, 0x6d, 0xdc, 0x75, 0xec, 0x2c,
	0x52, 0x3c, 0xfd, 0x4b, 0x82, 0x72, 0xba, 0x0b, 0xca, 0x18, 0xdb, 0x37, 0xd7, 0x29, 0xe3, 0x06,
	0x54, 0xb9, 0xed, 0x4c, 0x7a, 0x3d, 0xdb, 0xa1, 0x64, 0xeb, 0xa0, 0x71, 0x97, 0x8d, 0x31, 0x63,
	0xd8, 0x02, 0xc4, 0x1d, 0x42, 0x57, 0x0a, 0x65, 0xce, 0xfd, 0x19, 0x73, 0x95, 0x32, 0x17, 0x9d,
	0x7a, 0xe1, 0xa1, 0xc8, 0xfe, 0x58, 0x7f, 0xf8, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xda, 0xcc, 0x5c,
	0x91, 0x68, 0x07, 0x00, 0x00,
}
