// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fk-app.proto

/*
Package fk_app is a generated protocol buffer package.

It is generated from these files:
	fk-app.proto

It has these top-level messages:
	QueryCapabilities
	ModuleCapabilities
	SensorCapabilities
	Capabilities
	TimeSpec
	Schedule
	Schedules
	NetworkInfo
	NetworkSettings
	Identity
	ConfigureSensorQuery
	LiveDataPoll
	LiveDataSample
	LiveData
	File
	Files
	DownloadFile
	EraseFile
	FileData
	DeviceStatus
	QueryModule
	ModuleReply
	WireMessageQuery
	Error
	WireMessageReply
*/
package fk_app

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueryType int32

const (
	QueryType_QUERY_NONE                       QueryType = 0
	QueryType_QUERY_CAPABILITIES               QueryType = 1
	QueryType_QUERY_CONFIGURE_SENSOR           QueryType = 2
	QueryType_QUERY_LIVE_DATA_POLL             QueryType = 7
	QueryType_QUERY_SCHEDULES                  QueryType = 8
	QueryType_QUERY_CONFIGUE_SCHEDULES         QueryType = 9
	QueryType_QUERY_FILES                      QueryType = 10
	QueryType_QUERY_DOWNLOAD_FILE              QueryType = 11
	QueryType_QUERY_ERASE_FILE                 QueryType = 12
	QueryType_QUERY_RESET                      QueryType = 13
	QueryType_QUERY_NETWORK_SETTINGS           QueryType = 14
	QueryType_QUERY_CONFIGURE_NETWORK_SETTINGS QueryType = 15
	QueryType_QUERY_IDENTITY                   QueryType = 16
	QueryType_QUERY_CONFIGURE_IDENTITY         QueryType = 17
	QueryType_QUERY_STATUS                     QueryType = 18
	QueryType_QUERY_MODULE                     QueryType = 19
	QueryType_QUERY_METADATA                   QueryType = 20
	QueryType_QUERY_FORMAT                     QueryType = 21
)

var QueryType_name = map[int32]string{
	0:  "QUERY_NONE",
	1:  "QUERY_CAPABILITIES",
	2:  "QUERY_CONFIGURE_SENSOR",
	7:  "QUERY_LIVE_DATA_POLL",
	8:  "QUERY_SCHEDULES",
	9:  "QUERY_CONFIGUE_SCHEDULES",
	10: "QUERY_FILES",
	11: "QUERY_DOWNLOAD_FILE",
	12: "QUERY_ERASE_FILE",
	13: "QUERY_RESET",
	14: "QUERY_NETWORK_SETTINGS",
	15: "QUERY_CONFIGURE_NETWORK_SETTINGS",
	16: "QUERY_IDENTITY",
	17: "QUERY_CONFIGURE_IDENTITY",
	18: "QUERY_STATUS",
	19: "QUERY_MODULE",
	20: "QUERY_METADATA",
	21: "QUERY_FORMAT",
}
var QueryType_value = map[string]int32{
	"QUERY_NONE":                       0,
	"QUERY_CAPABILITIES":               1,
	"QUERY_CONFIGURE_SENSOR":           2,
	"QUERY_LIVE_DATA_POLL":             7,
	"QUERY_SCHEDULES":                  8,
	"QUERY_CONFIGUE_SCHEDULES":         9,
	"QUERY_FILES":                      10,
	"QUERY_DOWNLOAD_FILE":              11,
	"QUERY_ERASE_FILE":                 12,
	"QUERY_RESET":                      13,
	"QUERY_NETWORK_SETTINGS":           14,
	"QUERY_CONFIGURE_NETWORK_SETTINGS": 15,
	"QUERY_IDENTITY":                   16,
	"QUERY_CONFIGURE_IDENTITY":         17,
	"QUERY_STATUS":                     18,
	"QUERY_MODULE":                     19,
	"QUERY_METADATA":                   20,
	"QUERY_FORMAT":                     21,
}

func (x QueryType) String() string {
	return proto.EnumName(QueryType_name, int32(x))
}
func (QueryType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ReplyType int32

const (
	ReplyType_REPLY_NONE             ReplyType = 0
	ReplyType_REPLY_SUCCESS          ReplyType = 1
	ReplyType_REPLY_BUSY             ReplyType = 2
	ReplyType_REPLY_ERROR            ReplyType = 3
	ReplyType_REPLY_CAPABILITIES     ReplyType = 4
	ReplyType_REPLY_LIVE_DATA_POLL   ReplyType = 8
	ReplyType_REPLY_SCHEDULES        ReplyType = 9
	ReplyType_REPLY_FILES            ReplyType = 10
	ReplyType_REPLY_DOWNLOAD_FILE    ReplyType = 11
	ReplyType_REPLY_RESET            ReplyType = 12
	ReplyType_REPLY_NETWORK_SETTINGS ReplyType = 13
	ReplyType_REPLY_IDENTITY         ReplyType = 14
	ReplyType_REPLY_STATUS           ReplyType = 15
	ReplyType_REPLY_MODULE           ReplyType = 16
	ReplyType_REPLY_METADATA         ReplyType = 17
)

var ReplyType_name = map[int32]string{
	0:  "REPLY_NONE",
	1:  "REPLY_SUCCESS",
	2:  "REPLY_BUSY",
	3:  "REPLY_ERROR",
	4:  "REPLY_CAPABILITIES",
	8:  "REPLY_LIVE_DATA_POLL",
	9:  "REPLY_SCHEDULES",
	10: "REPLY_FILES",
	11: "REPLY_DOWNLOAD_FILE",
	12: "REPLY_RESET",
	13: "REPLY_NETWORK_SETTINGS",
	14: "REPLY_IDENTITY",
	15: "REPLY_STATUS",
	16: "REPLY_MODULE",
	17: "REPLY_METADATA",
}
var ReplyType_value = map[string]int32{
	"REPLY_NONE":             0,
	"REPLY_SUCCESS":          1,
	"REPLY_BUSY":             2,
	"REPLY_ERROR":            3,
	"REPLY_CAPABILITIES":     4,
	"REPLY_LIVE_DATA_POLL":   8,
	"REPLY_SCHEDULES":        9,
	"REPLY_FILES":            10,
	"REPLY_DOWNLOAD_FILE":    11,
	"REPLY_RESET":            12,
	"REPLY_NETWORK_SETTINGS": 13,
	"REPLY_IDENTITY":         14,
	"REPLY_STATUS":           15,
	"REPLY_MODULE":           16,
	"REPLY_METADATA":         17,
}

func (x ReplyType) String() string {
	return proto.EnumName(ReplyType_name, int32(x))
}
func (ReplyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DownloadFlags int32

const (
	DownloadFlags_DOWNLOAD_FLAG_NONE             DownloadFlags = 0
	DownloadFlags_DOWNLOAD_FLAG_METADATA_PREPEND DownloadFlags = 1
	DownloadFlags_DOWNLOAD_FLAG_METADATA_ONLY    DownloadFlags = 2
)

var DownloadFlags_name = map[int32]string{
	0: "DOWNLOAD_FLAG_NONE",
	1: "DOWNLOAD_FLAG_METADATA_PREPEND",
	2: "DOWNLOAD_FLAG_METADATA_ONLY",
}
var DownloadFlags_value = map[string]int32{
	"DOWNLOAD_FLAG_NONE":             0,
	"DOWNLOAD_FLAG_METADATA_PREPEND": 1,
	"DOWNLOAD_FLAG_METADATA_ONLY":    2,
}

func (x DownloadFlags) String() string {
	return proto.EnumName(DownloadFlags_name, int32(x))
}
func (DownloadFlags) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type QueryCapabilities struct {
	Version    uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	CallerTime uint32 `protobuf:"varint,2,opt,name=callerTime" json:"callerTime,omitempty"`
}

func (m *QueryCapabilities) Reset()                    { *m = QueryCapabilities{} }
func (m *QueryCapabilities) String() string            { return proto.CompactTextString(m) }
func (*QueryCapabilities) ProtoMessage()               {}
func (*QueryCapabilities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QueryCapabilities) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *QueryCapabilities) GetCallerTime() uint32 {
	if m != nil {
		return m.CallerTime
	}
	return 0
}

type ModuleCapabilities struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ModuleCapabilities) Reset()                    { *m = ModuleCapabilities{} }
func (m *ModuleCapabilities) String() string            { return proto.CompactTextString(m) }
func (*ModuleCapabilities) ProtoMessage()               {}
func (*ModuleCapabilities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ModuleCapabilities) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ModuleCapabilities) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SensorCapabilities struct {
	Id            uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Module        uint32 `protobuf:"varint,2,opt,name=module" json:"module,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Frequency     uint32 `protobuf:"varint,4,opt,name=frequency" json:"frequency,omitempty"`
	UnitOfMeasure string `protobuf:"bytes,5,opt,name=unitOfMeasure" json:"unitOfMeasure,omitempty"`
}

func (m *SensorCapabilities) Reset()                    { *m = SensorCapabilities{} }
func (m *SensorCapabilities) String() string            { return proto.CompactTextString(m) }
func (*SensorCapabilities) ProtoMessage()               {}
func (*SensorCapabilities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SensorCapabilities) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SensorCapabilities) GetModule() uint32 {
	if m != nil {
		return m.Module
	}
	return 0
}

func (m *SensorCapabilities) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SensorCapabilities) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *SensorCapabilities) GetUnitOfMeasure() string {
	if m != nil {
		return m.UnitOfMeasure
	}
	return ""
}

type Capabilities struct {
	Version  uint32                `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	DeviceId []byte                `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Name     string                `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Modules  []*ModuleCapabilities `protobuf:"bytes,4,rep,name=modules" json:"modules,omitempty"`
	Sensors  []*SensorCapabilities `protobuf:"bytes,5,rep,name=sensors" json:"sensors,omitempty"`
}

func (m *Capabilities) Reset()                    { *m = Capabilities{} }
func (m *Capabilities) String() string            { return proto.CompactTextString(m) }
func (*Capabilities) ProtoMessage()               {}
func (*Capabilities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Capabilities) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Capabilities) GetDeviceId() []byte {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *Capabilities) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Capabilities) GetModules() []*ModuleCapabilities {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *Capabilities) GetSensors() []*SensorCapabilities {
	if m != nil {
		return m.Sensors
	}
	return nil
}

type TimeSpec struct {
	Fixed    int32 `protobuf:"varint,1,opt,name=fixed" json:"fixed,omitempty"`
	Interval int32 `protobuf:"varint,2,opt,name=interval" json:"interval,omitempty"`
	Offset   int32 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *TimeSpec) Reset()                    { *m = TimeSpec{} }
func (m *TimeSpec) String() string            { return proto.CompactTextString(m) }
func (*TimeSpec) ProtoMessage()               {}
func (*TimeSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TimeSpec) GetFixed() int32 {
	if m != nil {
		return m.Fixed
	}
	return 0
}

func (m *TimeSpec) GetInterval() int32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *TimeSpec) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type Schedule struct {
	Second *TimeSpec `protobuf:"bytes,1,opt,name=second" json:"second,omitempty"`
	Minute *TimeSpec `protobuf:"bytes,2,opt,name=minute" json:"minute,omitempty"`
	Hour   *TimeSpec `protobuf:"bytes,3,opt,name=hour" json:"hour,omitempty"`
	Day    *TimeSpec `protobuf:"bytes,4,opt,name=day" json:"day,omitempty"`
}

func (m *Schedule) Reset()                    { *m = Schedule{} }
func (m *Schedule) String() string            { return proto.CompactTextString(m) }
func (*Schedule) ProtoMessage()               {}
func (*Schedule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Schedule) GetSecond() *TimeSpec {
	if m != nil {
		return m.Second
	}
	return nil
}

func (m *Schedule) GetMinute() *TimeSpec {
	if m != nil {
		return m.Minute
	}
	return nil
}

func (m *Schedule) GetHour() *TimeSpec {
	if m != nil {
		return m.Hour
	}
	return nil
}

func (m *Schedule) GetDay() *TimeSpec {
	if m != nil {
		return m.Day
	}
	return nil
}

type Schedules struct {
	Readings     *Schedule `protobuf:"bytes,1,opt,name=readings" json:"readings,omitempty"`
	Transmission *Schedule `protobuf:"bytes,2,opt,name=transmission" json:"transmission,omitempty"`
	Status       *Schedule `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Location     *Schedule `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
}

func (m *Schedules) Reset()                    { *m = Schedules{} }
func (m *Schedules) String() string            { return proto.CompactTextString(m) }
func (*Schedules) ProtoMessage()               {}
func (*Schedules) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Schedules) GetReadings() *Schedule {
	if m != nil {
		return m.Readings
	}
	return nil
}

func (m *Schedules) GetTransmission() *Schedule {
	if m != nil {
		return m.Transmission
	}
	return nil
}

func (m *Schedules) GetStatus() *Schedule {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Schedules) GetLocation() *Schedule {
	if m != nil {
		return m.Location
	}
	return nil
}

type NetworkInfo struct {
	Ssid     string `protobuf:"bytes,1,opt,name=ssid" json:"ssid,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *NetworkInfo) Reset()                    { *m = NetworkInfo{} }
func (m *NetworkInfo) String() string            { return proto.CompactTextString(m) }
func (*NetworkInfo) ProtoMessage()               {}
func (*NetworkInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *NetworkInfo) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *NetworkInfo) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type NetworkSettings struct {
	CreateAccessPoint int32          `protobuf:"varint,1,opt,name=createAccessPoint" json:"createAccessPoint,omitempty"`
	Networks          []*NetworkInfo `protobuf:"bytes,2,rep,name=networks" json:"networks,omitempty"`
}

func (m *NetworkSettings) Reset()                    { *m = NetworkSettings{} }
func (m *NetworkSettings) String() string            { return proto.CompactTextString(m) }
func (*NetworkSettings) ProtoMessage()               {}
func (*NetworkSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NetworkSettings) GetCreateAccessPoint() int32 {
	if m != nil {
		return m.CreateAccessPoint
	}
	return 0
}

func (m *NetworkSettings) GetNetworks() []*NetworkInfo {
	if m != nil {
		return m.Networks
	}
	return nil
}

type Identity struct {
	Device   string `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	Stream   string `protobuf:"bytes,2,opt,name=stream" json:"stream,omitempty"`
	DeviceId []byte `protobuf:"bytes,3,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
}

func (m *Identity) Reset()                    { *m = Identity{} }
func (m *Identity) String() string            { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()               {}
func (*Identity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Identity) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *Identity) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *Identity) GetDeviceId() []byte {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

type ConfigureSensorQuery struct {
	Id        uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Frequency uint32 `protobuf:"varint,2,opt,name=frequency" json:"frequency,omitempty"`
}

func (m *ConfigureSensorQuery) Reset()                    { *m = ConfigureSensorQuery{} }
func (m *ConfigureSensorQuery) String() string            { return proto.CompactTextString(m) }
func (*ConfigureSensorQuery) ProtoMessage()               {}
func (*ConfigureSensorQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ConfigureSensorQuery) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ConfigureSensorQuery) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

type LiveDataPoll struct {
	Interval uint32 `protobuf:"varint,1,opt,name=interval" json:"interval,omitempty"`
}

func (m *LiveDataPoll) Reset()                    { *m = LiveDataPoll{} }
func (m *LiveDataPoll) String() string            { return proto.CompactTextString(m) }
func (*LiveDataPoll) ProtoMessage()               {}
func (*LiveDataPoll) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *LiveDataPoll) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type LiveDataSample struct {
	Sensor uint32  `protobuf:"varint,1,opt,name=sensor" json:"sensor,omitempty"`
	Time   uint64  `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Value  float32 `protobuf:"fixed32,3,opt,name=value" json:"value,omitempty"`
}

func (m *LiveDataSample) Reset()                    { *m = LiveDataSample{} }
func (m *LiveDataSample) String() string            { return proto.CompactTextString(m) }
func (*LiveDataSample) ProtoMessage()               {}
func (*LiveDataSample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *LiveDataSample) GetSensor() uint32 {
	if m != nil {
		return m.Sensor
	}
	return 0
}

func (m *LiveDataSample) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *LiveDataSample) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type LiveData struct {
	Samples []*LiveDataSample `protobuf:"bytes,1,rep,name=samples" json:"samples,omitempty"`
}

func (m *LiveData) Reset()                    { *m = LiveData{} }
func (m *LiveData) String() string            { return proto.CompactTextString(m) }
func (*LiveData) ProtoMessage()               {}
func (*LiveData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *LiveData) GetSamples() []*LiveDataSample {
	if m != nil {
		return m.Samples
	}
	return nil
}

type File struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Time    uint64 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Size    uint64 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Version uint32 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	Name    string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Maximum uint64 `protobuf:"varint,6,opt,name=maximum" json:"maximum,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *File) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *File) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *File) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *File) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetMaximum() uint64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

type Files struct {
	Files []*File `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
}

func (m *Files) Reset()                    { *m = Files{} }
func (m *Files) String() string            { return proto.CompactTextString(m) }
func (*Files) ProtoMessage()               {}
func (*Files) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Files) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

type DownloadFile struct {
	Id     uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Offset uint32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Length uint32 `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	Flags  uint32 `protobuf:"varint,4,opt,name=flags" json:"flags,omitempty"`
}

func (m *DownloadFile) Reset()                    { *m = DownloadFile{} }
func (m *DownloadFile) String() string            { return proto.CompactTextString(m) }
func (*DownloadFile) ProtoMessage()               {}
func (*DownloadFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DownloadFile) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DownloadFile) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DownloadFile) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *DownloadFile) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type EraseFile struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *EraseFile) Reset()                    { *m = EraseFile{} }
func (m *EraseFile) String() string            { return proto.CompactTextString(m) }
func (*EraseFile) ProtoMessage()               {}
func (*EraseFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *EraseFile) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FileData struct {
	Offset  uint32 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Size    uint32 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Hash    uint32 `protobuf:"varint,4,opt,name=hash" json:"hash,omitempty"`
	Version uint32 `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	Id      uint32 `protobuf:"varint,6,opt,name=id" json:"id,omitempty"`
}

func (m *FileData) Reset()                    { *m = FileData{} }
func (m *FileData) String() string            { return proto.CompactTextString(m) }
func (*FileData) ProtoMessage()               {}
func (*FileData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *FileData) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FileData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FileData) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileData) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *FileData) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *FileData) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeviceStatus struct {
	Uptime            uint32  `protobuf:"varint,1,opt,name=uptime" json:"uptime,omitempty"`
	BatteryPercentage float32 `protobuf:"fixed32,2,opt,name=batteryPercentage" json:"batteryPercentage,omitempty"`
	BatteryVoltage    float32 `protobuf:"fixed32,3,opt,name=batteryVoltage" json:"batteryVoltage,omitempty"`
	GpsHasFix         uint32  `protobuf:"varint,4,opt,name=gpsHasFix" json:"gpsHasFix,omitempty"`
	GpsSatellites     uint32  `protobuf:"varint,5,opt,name=gpsSatellites" json:"gpsSatellites,omitempty"`
}

func (m *DeviceStatus) Reset()                    { *m = DeviceStatus{} }
func (m *DeviceStatus) String() string            { return proto.CompactTextString(m) }
func (*DeviceStatus) ProtoMessage()               {}
func (*DeviceStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *DeviceStatus) GetUptime() uint32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *DeviceStatus) GetBatteryPercentage() float32 {
	if m != nil {
		return m.BatteryPercentage
	}
	return 0
}

func (m *DeviceStatus) GetBatteryVoltage() float32 {
	if m != nil {
		return m.BatteryVoltage
	}
	return 0
}

func (m *DeviceStatus) GetGpsHasFix() uint32 {
	if m != nil {
		return m.GpsHasFix
	}
	return 0
}

func (m *DeviceStatus) GetGpsSatellites() uint32 {
	if m != nil {
		return m.GpsSatellites
	}
	return 0
}

type QueryModule struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Address uint32 `protobuf:"varint,2,opt,name=address" json:"address,omitempty"`
	Message []byte `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *QueryModule) Reset()                    { *m = QueryModule{} }
func (m *QueryModule) String() string            { return proto.CompactTextString(m) }
func (*QueryModule) ProtoMessage()               {}
func (*QueryModule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *QueryModule) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryModule) GetAddress() uint32 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *QueryModule) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type ModuleReply struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Address uint32 `protobuf:"varint,2,opt,name=address" json:"address,omitempty"`
	Message []byte `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ModuleReply) Reset()                    { *m = ModuleReply{} }
func (m *ModuleReply) String() string            { return proto.CompactTextString(m) }
func (*ModuleReply) ProtoMessage()               {}
func (*ModuleReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ModuleReply) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ModuleReply) GetAddress() uint32 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *ModuleReply) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type WireMessageQuery struct {
	Type              QueryType             `protobuf:"varint,1,opt,name=type,enum=fk_app.QueryType" json:"type,omitempty"`
	QueryCapabilities *QueryCapabilities    `protobuf:"bytes,2,opt,name=queryCapabilities" json:"queryCapabilities,omitempty"`
	ConfigureSensor   *ConfigureSensorQuery `protobuf:"bytes,3,opt,name=configureSensor" json:"configureSensor,omitempty"`
	LiveDataPoll      *LiveDataPoll         `protobuf:"bytes,8,opt,name=liveDataPoll" json:"liveDataPoll,omitempty"`
	NewSchedules      *Schedules            `protobuf:"bytes,9,opt,name=newSchedules" json:"newSchedules,omitempty"`
	DownloadFile      *DownloadFile         `protobuf:"bytes,10,opt,name=downloadFile" json:"downloadFile,omitempty"`
	EraseFile         *EraseFile            `protobuf:"bytes,11,opt,name=eraseFile" json:"eraseFile,omitempty"`
	NetworkSettings   *NetworkSettings      `protobuf:"bytes,12,opt,name=networkSettings" json:"networkSettings,omitempty"`
	Identity          *Identity             `protobuf:"bytes,13,opt,name=identity" json:"identity,omitempty"`
	Module            *QueryModule          `protobuf:"bytes,14,opt,name=module" json:"module,omitempty"`
}

func (m *WireMessageQuery) Reset()                    { *m = WireMessageQuery{} }
func (m *WireMessageQuery) String() string            { return proto.CompactTextString(m) }
func (*WireMessageQuery) ProtoMessage()               {}
func (*WireMessageQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *WireMessageQuery) GetType() QueryType {
	if m != nil {
		return m.Type
	}
	return QueryType_QUERY_NONE
}

func (m *WireMessageQuery) GetQueryCapabilities() *QueryCapabilities {
	if m != nil {
		return m.QueryCapabilities
	}
	return nil
}

func (m *WireMessageQuery) GetConfigureSensor() *ConfigureSensorQuery {
	if m != nil {
		return m.ConfigureSensor
	}
	return nil
}

func (m *WireMessageQuery) GetLiveDataPoll() *LiveDataPoll {
	if m != nil {
		return m.LiveDataPoll
	}
	return nil
}

func (m *WireMessageQuery) GetNewSchedules() *Schedules {
	if m != nil {
		return m.NewSchedules
	}
	return nil
}

func (m *WireMessageQuery) GetDownloadFile() *DownloadFile {
	if m != nil {
		return m.DownloadFile
	}
	return nil
}

func (m *WireMessageQuery) GetEraseFile() *EraseFile {
	if m != nil {
		return m.EraseFile
	}
	return nil
}

func (m *WireMessageQuery) GetNetworkSettings() *NetworkSettings {
	if m != nil {
		return m.NetworkSettings
	}
	return nil
}

func (m *WireMessageQuery) GetIdentity() *Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *WireMessageQuery) GetModule() *QueryModule {
	if m != nil {
		return m.Module
	}
	return nil
}

type Error struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type WireMessageReply struct {
	Type            ReplyType        `protobuf:"varint,1,opt,name=type,enum=fk_app.ReplyType" json:"type,omitempty"`
	Errors          []*Error         `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
	Capabilities    *Capabilities    `protobuf:"bytes,3,opt,name=capabilities" json:"capabilities,omitempty"`
	LiveData        *LiveData        `protobuf:"bytes,6,opt,name=liveData" json:"liveData,omitempty"`
	Schedules       *Schedules       `protobuf:"bytes,7,opt,name=schedules" json:"schedules,omitempty"`
	Files           *Files           `protobuf:"bytes,8,opt,name=files" json:"files,omitempty"`
	FileData        *FileData        `protobuf:"bytes,9,opt,name=fileData" json:"fileData,omitempty"`
	NetworkSettings *NetworkSettings `protobuf:"bytes,10,opt,name=networkSettings" json:"networkSettings,omitempty"`
	Identity        *Identity        `protobuf:"bytes,11,opt,name=identity" json:"identity,omitempty"`
	Status          *DeviceStatus    `protobuf:"bytes,12,opt,name=status" json:"status,omitempty"`
	Module          *ModuleReply     `protobuf:"bytes,13,opt,name=module" json:"module,omitempty"`
}

func (m *WireMessageReply) Reset()                    { *m = WireMessageReply{} }
func (m *WireMessageReply) String() string            { return proto.CompactTextString(m) }
func (*WireMessageReply) ProtoMessage()               {}
func (*WireMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *WireMessageReply) GetType() ReplyType {
	if m != nil {
		return m.Type
	}
	return ReplyType_REPLY_NONE
}

func (m *WireMessageReply) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *WireMessageReply) GetCapabilities() *Capabilities {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *WireMessageReply) GetLiveData() *LiveData {
	if m != nil {
		return m.LiveData
	}
	return nil
}

func (m *WireMessageReply) GetSchedules() *Schedules {
	if m != nil {
		return m.Schedules
	}
	return nil
}

func (m *WireMessageReply) GetFiles() *Files {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *WireMessageReply) GetFileData() *FileData {
	if m != nil {
		return m.FileData
	}
	return nil
}

func (m *WireMessageReply) GetNetworkSettings() *NetworkSettings {
	if m != nil {
		return m.NetworkSettings
	}
	return nil
}

func (m *WireMessageReply) GetIdentity() *Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *WireMessageReply) GetStatus() *DeviceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *WireMessageReply) GetModule() *ModuleReply {
	if m != nil {
		return m.Module
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryCapabilities)(nil), "fk_app.QueryCapabilities")
	proto.RegisterType((*ModuleCapabilities)(nil), "fk_app.ModuleCapabilities")
	proto.RegisterType((*SensorCapabilities)(nil), "fk_app.SensorCapabilities")
	proto.RegisterType((*Capabilities)(nil), "fk_app.Capabilities")
	proto.RegisterType((*TimeSpec)(nil), "fk_app.TimeSpec")
	proto.RegisterType((*Schedule)(nil), "fk_app.Schedule")
	proto.RegisterType((*Schedules)(nil), "fk_app.Schedules")
	proto.RegisterType((*NetworkInfo)(nil), "fk_app.NetworkInfo")
	proto.RegisterType((*NetworkSettings)(nil), "fk_app.NetworkSettings")
	proto.RegisterType((*Identity)(nil), "fk_app.Identity")
	proto.RegisterType((*ConfigureSensorQuery)(nil), "fk_app.ConfigureSensorQuery")
	proto.RegisterType((*LiveDataPoll)(nil), "fk_app.LiveDataPoll")
	proto.RegisterType((*LiveDataSample)(nil), "fk_app.LiveDataSample")
	proto.RegisterType((*LiveData)(nil), "fk_app.LiveData")
	proto.RegisterType((*File)(nil), "fk_app.File")
	proto.RegisterType((*Files)(nil), "fk_app.Files")
	proto.RegisterType((*DownloadFile)(nil), "fk_app.DownloadFile")
	proto.RegisterType((*EraseFile)(nil), "fk_app.EraseFile")
	proto.RegisterType((*FileData)(nil), "fk_app.FileData")
	proto.RegisterType((*DeviceStatus)(nil), "fk_app.DeviceStatus")
	proto.RegisterType((*QueryModule)(nil), "fk_app.QueryModule")
	proto.RegisterType((*ModuleReply)(nil), "fk_app.ModuleReply")
	proto.RegisterType((*WireMessageQuery)(nil), "fk_app.WireMessageQuery")
	proto.RegisterType((*Error)(nil), "fk_app.Error")
	proto.RegisterType((*WireMessageReply)(nil), "fk_app.WireMessageReply")
	proto.RegisterEnum("fk_app.QueryType", QueryType_name, QueryType_value)
	proto.RegisterEnum("fk_app.ReplyType", ReplyType_name, ReplyType_value)
	proto.RegisterEnum("fk_app.DownloadFlags", DownloadFlags_name, DownloadFlags_value)
}

func init() { proto.RegisterFile("fk-app.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5f, 0x6f, 0xdb, 0xc8,
	0x11, 0xaf, 0x64, 0x49, 0x96, 0x46, 0x94, 0x4c, 0xad, 0x5d, 0x1f, 0x9b, 0x0b, 0xae, 0x29, 0x9b,
	0x2b, 0x02, 0x5f, 0x9a, 0x2b, 0xd2, 0x2b, 0x70, 0x0f, 0xed, 0x83, 0xce, 0xa2, 0x7d, 0x42, 0x65,
	0x49, 0x59, 0xca, 0x09, 0xfc, 0x64, 0x6c, 0xa4, 0x95, 0x4d, 0x84, 0x22, 0x79, 0x5c, 0xca, 0x8e,
	0xfb, 0x01, 0x8a, 0x7e, 0x80, 0x3e, 0xf4, 0x23, 0x14, 0xe8, 0x27, 0xe8, 0x5b, 0x1f, 0x02, 0xf4,
	0x6b, 0x15, 0xfb, 0x8f, 0xe4, 0x4a, 0x72, 0x5b, 0xa0, 0x7d, 0xd3, 0xcc, 0xfc, 0x76, 0x66, 0x76,
	0xe6, 0xb7, 0x33, 0x84, 0xc0, 0x5a, 0x7e, 0xf8, 0x25, 0x49, 0x92, 0x57, 0x49, 0x1a, 0x67, 0x31,
	0x6a, 0x2c, 0x3f, 0x5c, 0x93, 0x24, 0x71, 0x2f, 0xa0, 0xf7, 0x66, 0x4d, 0xd3, 0x87, 0x53, 0x92,
	0x90, 0xf7, 0x41, 0x18, 0x64, 0x01, 0x65, 0xc8, 0x81, 0xfd, 0x3b, 0x9a, 0xb2, 0x20, 0x8e, 0x9c,
	0xca, 0xb3, 0xca, 0x8b, 0x0e, 0xd6, 0x22, 0xfa, 0x02, 0x60, 0x4e, 0xc2, 0x90, 0xa6, 0xb3, 0x60,
	0x45, 0x9d, 0xaa, 0x30, 0x96, 0x34, 0xee, 0xb7, 0x80, 0x2e, 0xe2, 0xc5, 0x3a, 0xa4, 0x86, 0xbf,
	0x2e, 0x54, 0x83, 0x85, 0x72, 0x55, 0x0d, 0x16, 0x08, 0x41, 0x2d, 0x22, 0xea, 0x7c, 0x0b, 0x8b,
	0xdf, 0xee, 0x9f, 0x2b, 0x80, 0x7c, 0x1a, 0xb1, 0x38, 0xfd, 0xb7, 0x47, 0x8f, 0xa1, 0xb1, 0x12,
	0x01, 0x54, 0x70, 0x25, 0xe5, 0x2e, 0xf7, 0x0a, 0x97, 0xe8, 0x29, 0xb4, 0x96, 0x29, 0xfd, 0x61,
	0x4d, 0xa3, 0xf9, 0x83, 0x53, 0x13, 0xf0, 0x42, 0x81, 0x9e, 0x43, 0x67, 0x1d, 0x05, 0xd9, 0x64,
	0x79, 0x41, 0x09, 0x5b, 0xa7, 0xd4, 0xa9, 0x8b, 0xa3, 0xa6, 0xd2, 0xfd, 0x54, 0x01, 0xeb, 0xbf,
	0xac, 0xcd, 0x13, 0x68, 0x2e, 0xe8, 0x5d, 0x30, 0xa7, 0xc3, 0x85, 0x48, 0xce, 0xc2, 0xb9, 0xbc,
	0x33, 0xbd, 0x6f, 0x60, 0x5f, 0x26, 0xcf, 0x9c, 0xda, 0xb3, 0xbd, 0x17, 0xed, 0xd7, 0x4f, 0x5e,
	0xc9, 0xa6, 0xbc, 0xda, 0x2e, 0x21, 0xd6, 0x50, 0x7e, 0x8a, 0x89, 0x32, 0x31, 0xa7, 0x6e, 0x9e,
	0xda, 0xae, 0x1e, 0xd6, 0x50, 0x77, 0x06, 0x4d, 0xde, 0x1f, 0x3f, 0xa1, 0x73, 0x74, 0x04, 0xf5,
	0x65, 0xf0, 0x91, 0xca, 0xaa, 0xd6, 0xb1, 0x14, 0x78, 0xf6, 0x41, 0x94, 0xd1, 0xf4, 0x8e, 0x84,
	0x22, 0xfb, 0x3a, 0xce, 0x65, 0x5e, 0xf4, 0x78, 0xb9, 0x64, 0x34, 0x13, 0xf9, 0xd7, 0xb1, 0x92,
	0xdc, 0xbf, 0x56, 0xa0, 0xe9, 0xcf, 0x6f, 0xa9, 0xe8, 0xc0, 0x0b, 0x68, 0x30, 0x3a, 0x8f, 0x23,
	0xe9, 0xb7, 0xfd, 0xda, 0xd6, 0x79, 0xe9, 0xc0, 0x58, 0xd9, 0x39, 0x72, 0x15, 0x44, 0xeb, 0x4c,
	0xf6, 0x70, 0x27, 0x52, 0xda, 0xd1, 0x73, 0xa8, 0xdd, 0xc6, 0xeb, 0x54, 0x84, 0xdd, 0x85, 0x13,
	0x56, 0xe4, 0xc2, 0xde, 0x82, 0xc8, 0x0e, 0xef, 0x02, 0x71, 0xa3, 0xfb, 0xcf, 0x0a, 0xb4, 0x74,
	0xaa, 0x0c, 0xbd, 0x84, 0x66, 0x4a, 0xc9, 0x22, 0x88, 0x6e, 0xd8, 0x66, 0xb6, 0x1a, 0x84, 0x73,
	0x04, 0xfa, 0x06, 0xac, 0x2c, 0x25, 0x11, 0x5b, 0x05, 0x4c, 0xf4, 0xbd, 0xfa, 0xc8, 0x09, 0x03,
	0x25, 0xea, 0x91, 0x91, 0x6c, 0xcd, 0x36, 0xb3, 0xcf, 0xf1, 0xca, 0xce, 0xb3, 0x09, 0xe3, 0x39,
	0xc9, 0xb8, 0xef, 0xda, 0x63, 0xd9, 0x68, 0x84, 0xfb, 0x3b, 0x68, 0x8f, 0x69, 0x76, 0x1f, 0xa7,
	0x1f, 0x86, 0xd1, 0x32, 0xe6, 0xcc, 0x62, 0x4c, 0x3d, 0x91, 0x16, 0x16, 0xbf, 0x79, 0x2f, 0x13,
	0xc2, 0xd8, 0x7d, 0x9c, 0x2e, 0xd4, 0x1b, 0xcb, 0x65, 0x37, 0x81, 0x03, 0x75, 0xdc, 0xa7, 0x59,
	0x26, 0xee, 0xf7, 0x12, 0x7a, 0xf3, 0x94, 0x92, 0x8c, 0xf6, 0xe7, 0x73, 0xca, 0xd8, 0x34, 0x0e,
	0xa2, 0x4c, 0x91, 0x63, 0xdb, 0x80, 0xbe, 0x86, 0x66, 0x24, 0x1d, 0x30, 0xa7, 0x2a, 0x18, 0x78,
	0xa8, 0xb3, 0x2d, 0xe5, 0x85, 0x73, 0x90, 0xfb, 0x16, 0x9a, 0xc3, 0x05, 0x8d, 0xb2, 0x20, 0x7b,
	0xe0, 0x4c, 0x92, 0x6f, 0x42, 0xe5, 0xab, 0x24, 0xae, 0x67, 0x59, 0x4a, 0xc9, 0x4a, 0xe5, 0xab,
	0x24, 0xe3, 0x4d, 0xed, 0x99, 0x6f, 0xca, 0x1d, 0xc0, 0xd1, 0x69, 0x1c, 0x2d, 0x83, 0x9b, 0x75,
	0x4a, 0x25, 0xf7, 0xc5, 0x24, 0xdb, 0x1a, 0x19, 0xc6, 0x18, 0xa8, 0x6e, 0x8c, 0x01, 0xf7, 0x04,
	0xac, 0x51, 0x70, 0x47, 0x07, 0x24, 0x23, 0xd3, 0x38, 0x0c, 0x8d, 0x77, 0x20, 0x7d, 0xe4, 0xb2,
	0x8b, 0xa1, 0xab, 0xb1, 0x3e, 0x59, 0x25, 0xa1, 0xcc, 0x5b, 0x84, 0x56, 0x58, 0x25, 0xf1, 0xae,
	0x64, 0x7a, 0x42, 0xd6, 0xb0, 0xf8, 0xcd, 0xdf, 0xdd, 0x1d, 0x09, 0xd7, 0x72, 0x08, 0x54, 0xb1,
	0x14, 0xdc, 0xdf, 0x42, 0x53, 0xfb, 0x44, 0xbf, 0x82, 0x7d, 0x26, 0xfc, 0x72, 0x56, 0xf2, 0xca,
	0x1e, 0xeb, 0xca, 0x9a, 0x61, 0xb1, 0x86, 0xb9, 0x7f, 0xac, 0x40, 0xed, 0x2c, 0x08, 0xe9, 0xae,
	0x11, 0xbb, 0x95, 0x00, 0xa7, 0x4a, 0xf0, 0x07, 0x19, 0xbf, 0x86, 0xc5, 0xef, 0xf2, 0x38, 0xab,
	0x99, 0xe3, 0x4c, 0x8f, 0xac, 0x7a, 0x69, 0x64, 0x39, 0xb0, 0xbf, 0x22, 0x1f, 0x83, 0xd5, 0x7a,
	0xe5, 0x34, 0x84, 0x13, 0x2d, 0xba, 0x5f, 0x41, 0x9d, 0xe7, 0xc1, 0x90, 0xcb, 0xa7, 0x4b, 0x71,
	0x03, 0x4b, 0xdf, 0x80, 0x5b, 0xb1, 0x34, 0xb9, 0x0b, 0xb0, 0x06, 0xf1, 0x7d, 0x14, 0xc6, 0x64,
	0xb1, 0x33, 0xf9, 0x62, 0xde, 0xa8, 0x21, 0x2f, 0x25, 0xae, 0x0f, 0x69, 0x74, 0x93, 0xdd, 0x8a,
	0x2b, 0x74, 0xb0, 0x92, 0xc4, 0x44, 0x0b, 0xc9, 0x0d, 0x53, 0x57, 0x90, 0x82, 0xfb, 0x39, 0xb4,
	0xbc, 0x94, 0x30, 0xba, 0x2b, 0x84, 0xfb, 0xa7, 0x0a, 0x34, 0xb9, 0x41, 0xd4, 0xbd, 0x88, 0x57,
	0x31, 0xe2, 0x21, 0xa8, 0x2d, 0x48, 0x46, 0xd4, 0x34, 0x17, 0xbf, 0x8d, 0x22, 0x76, 0x54, 0x11,
	0x11, 0xd4, 0x6e, 0x09, 0xbb, 0x55, 0xe1, 0xc5, 0xef, 0x72, 0x61, 0xeb, 0x66, 0x61, 0x65, 0x2a,
	0x8d, 0x3c, 0x95, 0x7f, 0x54, 0xc0, 0x1a, 0x08, 0x52, 0xfb, 0x72, 0x1e, 0x1c, 0x43, 0x63, 0x9d,
	0x88, 0xee, 0xa9, 0x74, 0xa4, 0xc4, 0xdf, 0xe9, 0x7b, 0x92, 0x65, 0x34, 0x7d, 0x98, 0xd2, 0x74,
	0x4e, 0xa3, 0x8c, 0xdc, 0xc8, 0x06, 0x57, 0xf1, 0xb6, 0x01, 0xfd, 0x02, 0xba, 0x4a, 0xf9, 0x36,
	0x0e, 0x05, 0x54, 0xf2, 0x6e, 0x43, 0xcb, 0x9f, 0xc7, 0x4d, 0xc2, 0xbe, 0x27, 0xec, 0x2c, 0xf8,
	0xa8, 0xb7, 0x64, 0xae, 0xe0, 0x5b, 0xf2, 0x26, 0x61, 0x3e, 0xc9, 0x68, 0x18, 0x06, 0x19, 0x65,
	0xea, 0x32, 0xa6, 0xd2, 0x7d, 0x03, 0x6d, 0xf1, 0xf6, 0xe4, 0xe2, 0xda, 0xea, 0xa7, 0x03, 0xfb,
	0x64, 0xb1, 0x48, 0x29, 0x63, 0xaa, 0xa1, 0x5a, 0x14, 0x84, 0xa2, 0x8c, 0xe9, 0xec, 0x2c, 0xac,
	0x45, 0xee, 0x52, 0x7a, 0xc3, 0x34, 0x09, 0x1f, 0xfe, 0x2f, 0x2e, 0x3f, 0xd5, 0xc0, 0x7e, 0x17,
	0xa4, 0xf4, 0x42, 0xca, 0x72, 0x5a, 0x7c, 0x09, 0xb5, 0xec, 0x21, 0x91, 0xa5, 0xee, 0xbe, 0xee,
	0x69, 0xba, 0x0a, 0xe3, 0xec, 0x21, 0xa1, 0x58, 0x98, 0xd1, 0x39, 0xf4, 0x7e, 0xd8, 0xfc, 0x4e,
	0x52, 0x8b, 0xe0, 0x27, 0xc6, 0x19, 0x63, 0xff, 0x6e, 0x9f, 0x41, 0x67, 0x70, 0x30, 0x37, 0xa7,
	0x96, 0xda, 0x0f, 0x4f, 0xb5, 0x9b, 0x5d, 0x43, 0x0d, 0x6f, 0x1e, 0x42, 0xdf, 0x82, 0x15, 0x96,
	0xe6, 0x96, 0xd3, 0x14, 0x4e, 0x8e, 0x36, 0x07, 0x06, 0xb7, 0x61, 0x03, 0x89, 0x7e, 0x03, 0x56,
	0x44, 0xef, 0xf3, 0x65, 0xe8, 0xb4, 0xc4, 0xc9, 0xde, 0xe6, 0xca, 0x61, 0xd8, 0x80, 0xf1, 0x80,
	0x8b, 0xd2, 0xa3, 0x75, 0xc0, 0x0c, 0x58, 0x7e, 0xd0, 0xd8, 0x40, 0xa2, 0xaf, 0xa1, 0x45, 0xf5,
	0x43, 0x74, 0xda, 0x66, 0xb4, 0xfc, 0x85, 0xe2, 0x02, 0x83, 0xfa, 0x70, 0x10, 0x99, 0x3b, 0xca,
	0xb1, 0xc4, 0xb1, 0xcf, 0x36, 0x36, 0x8d, 0x36, 0xe3, 0x4d, 0x3c, 0xdf, 0xa9, 0x81, 0x5a, 0x3a,
	0x4e, 0xc7, 0xdc, 0xa9, 0x7a, 0x19, 0xe1, 0x1c, 0x81, 0xbe, 0xca, 0xbf, 0x2a, 0xbb, 0x02, 0x7b,
	0x68, 0xb4, 0x54, 0xf1, 0x50, 0x41, 0xdc, 0x9f, 0x41, 0xdd, 0x4b, 0xd3, 0x38, 0x2d, 0x33, 0x4d,
	0x6e, 0xb3, 0x9c, 0x69, 0x7f, 0x31, 0x99, 0x26, 0x29, 0xfc, 0x08, 0xd3, 0x84, 0xb1, 0xc4, 0xb4,
	0x2f, 0xa1, 0x41, 0xb9, 0x7b, 0xbd, 0x5d, 0x3b, 0x45, 0xa9, 0xd2, 0x38, 0xc5, 0xca, 0xc8, 0xdb,
	0x31, 0x2f, 0x73, 0x71, 0xcf, 0x6c, 0x87, 0x41, 0x43, 0x03, 0x29, 0x3e, 0x37, 0x14, 0x1f, 0xc4,
	0x14, 0x2a, 0x95, 0x46, 0xb3, 0x06, 0xe7, 0x08, 0xde, 0x3c, 0x96, 0x53, 0x65, 0xff, 0x31, 0xaa,
	0x14, 0x18, 0xf4, 0x73, 0xbd, 0x00, 0x24, 0x23, 0x3b, 0xe5, 0x05, 0xc0, 0xd4, 0x06, 0xe0, 0x39,
	0x2c, 0xd5, 0xf4, 0x55, 0xfc, 0xb3, 0xcb, 0x38, 0x99, 0x83, 0x46, 0xec, 0xe2, 0x03, 0xfc, 0x0f,
	0x7c, 0x68, 0xff, 0x47, 0x3e, 0xbc, 0xcc, 0xbf, 0xdd, 0xac, 0x0d, 0x96, 0x97, 0xe6, 0x74, 0xfe,
	0xfd, 0x56, 0xb0, 0xa7, 0x63, 0xb2, 0xa7, 0x34, 0xc0, 0x34, 0x7b, 0x4e, 0xfe, 0xb6, 0x07, 0xad,
	0x7c, 0xb8, 0xa0, 0x2e, 0xc0, 0x9b, 0x4b, 0x0f, 0x5f, 0x5d, 0x8f, 0x27, 0x63, 0xcf, 0xfe, 0x11,
	0x3a, 0x06, 0x24, 0xe5, 0xd3, 0xfe, 0xb4, 0xff, 0xdd, 0x70, 0x34, 0x9c, 0x0d, 0x3d, 0xdf, 0xae,
	0xa0, 0x27, 0x70, 0xac, 0xf4, 0x93, 0xf1, 0xd9, 0xf0, 0xfc, 0x12, 0x7b, 0xd7, 0xbe, 0x37, 0xf6,
	0x27, 0xd8, 0xae, 0x22, 0x07, 0x8e, 0xa4, 0x6d, 0x34, 0x7c, 0xeb, 0x5d, 0x0f, 0xfa, 0xb3, 0xfe,
	0xf5, 0x74, 0x32, 0x1a, 0xd9, 0xfb, 0xe8, 0x10, 0x0e, 0xa4, 0xc5, 0x3f, 0xfd, 0xde, 0x1b, 0x5c,
	0x8e, 0x3c, 0xdf, 0x6e, 0xa2, 0xa7, 0xe0, 0x18, 0xae, 0xbc, 0x92, 0xb5, 0x85, 0x0e, 0xa0, 0x2d,
	0xad, 0x67, 0x43, 0xae, 0x00, 0xf4, 0x19, 0x1c, 0x4a, 0xc5, 0x60, 0xf2, 0x6e, 0x3c, 0x9a, 0xf4,
	0x07, 0xc2, 0x62, 0xb7, 0xd1, 0x11, 0xd8, 0xd2, 0xe0, 0xe1, 0xbe, 0xef, 0x49, 0xad, 0x55, 0x9c,
	0xc7, 0x9e, 0xef, 0xcd, 0xec, 0x4e, 0x91, 0xf9, 0xd8, 0x9b, 0xbd, 0x9b, 0xe0, 0xdf, 0x5f, 0xfb,
	0xde, 0x6c, 0x36, 0x1c, 0x9f, 0xfb, 0x76, 0x17, 0x3d, 0x87, 0x67, 0x9b, 0xb7, 0xda, 0x42, 0x1d,
	0x20, 0x04, 0x5d, 0x89, 0x1a, 0x0e, 0xbc, 0xf1, 0x6c, 0x38, 0xbb, 0xb2, 0xed, 0xad, 0x4b, 0x60,
	0xaf, 0xb0, 0xf6, 0x90, 0x0d, 0x96, 0xba, 0xf7, 0xac, 0x3f, 0xbb, 0xf4, 0x6d, 0x54, 0x68, 0x2e,
	0x26, 0xfc, 0xa6, 0xf6, 0x61, 0xe1, 0xf5, 0xc2, 0x9b, 0xf5, 0x79, 0xd1, 0xec, 0xa3, 0x02, 0x75,
	0x36, 0xc1, 0x17, 0xfd, 0x99, 0xfd, 0xe3, 0x93, 0xbf, 0x57, 0xa1, 0x95, 0x3f, 0x50, 0xde, 0x2d,
	0xec, 0x4d, 0x47, 0x79, 0xb7, 0x7a, 0xd0, 0x91, 0xb2, 0x7f, 0x79, 0x7a, 0xea, 0xf9, 0xbc, 0x51,
	0x39, 0xe4, 0xbb, 0x4b, 0xff, 0xca, 0xae, 0xf2, 0x7a, 0x48, 0xd9, 0xc3, 0x78, 0x82, 0xed, 0x3d,
	0xde, 0x61, 0xa9, 0x30, 0x3a, 0x5c, 0xe3, 0x5d, 0x94, 0xfa, 0x8d, 0x2e, 0x36, 0x79, 0x17, 0x55,
	0x14, 0xb3, 0x4f, 0x52, 0x59, 0xea, 0x93, 0x54, 0x6c, 0xf6, 0x29, 0x47, 0xca, 0x8e, 0x58, 0xbc,
	0x23, 0xea, 0x16, 0x9b, 0xb5, 0xee, 0xf0, 0xaa, 0x48, 0x5b, 0x5e, 0xcd, 0x2e, 0xaf, 0x8a, 0x8a,
	0x2f, 0xab, 0x79, 0x50, 0x68, 0x54, 0x35, 0xed, 0xe2, 0x5c, 0x5e, 0xcd, 0xde, 0x49, 0x08, 0x9d,
	0x7c, 0x29, 0xf0, 0x0f, 0x32, 0x7e, 0xf5, 0x22, 0xb9, 0x51, 0xff, 0x5c, 0x97, 0xd1, 0x85, 0x2f,
	0x4c, 0xbd, 0x76, 0x72, 0x3d, 0xc5, 0xde, 0xd4, 0x1b, 0x0f, 0xec, 0x0a, 0xfa, 0x29, 0x7c, 0xfe,
	0x08, 0x66, 0x32, 0x1e, 0x5d, 0xd9, 0xd5, 0xf7, 0x0d, 0xf1, 0xbf, 0xc6, 0xaf, 0xff, 0x15, 0x00,
	0x00, 0xff, 0xff, 0x6d, 0x26, 0xa1, 0x22, 0xe7, 0x10, 0x00, 0x00,
}
