// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fk-app.proto

/*
Package fk_app is a generated protocol buffer package.

It is generated from these files:
	fk-app.proto

It has these top-level messages:
	QueryCapabilities
	ModuleCapabilities
	SensorCapabilities
	Capabilities
	TimeSpec
	Schedule
	Schedules
	NetworkInfo
	NetworkSettings
	Identity
	ConfigureSensorQuery
	QueryDataSets
	DataSet
	DataSets
	DownloadDataSet
	Sample
	DataSetData
	LiveDataPoll
	LiveDataSample
	LiveData
	QueryDataSet
	EraseDataSet
	File
	Files
	DownloadFile
	EraseFile
	FileData
	DeviceStatus
	WireMessageQuery
	Error
	WireMessageReply
*/
package fk_app

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueryType int32

const (
	QueryType_QUERY_NONE                       QueryType = 0
	QueryType_QUERY_CAPABILITIES               QueryType = 1
	QueryType_QUERY_CONFIGURE_SENSOR           QueryType = 2
	QueryType_QUERY_DATA_SETS                  QueryType = 3
	QueryType_QUERY_DATA_SET                   QueryType = 4
	QueryType_QUERY_DOWNLOAD_DATA_SET          QueryType = 5
	QueryType_QUERY_ERASE_DATA_SET             QueryType = 6
	QueryType_QUERY_LIVE_DATA_POLL             QueryType = 7
	QueryType_QUERY_SCHEDULES                  QueryType = 8
	QueryType_QUERY_CONFIGUE_SCHEDULES         QueryType = 9
	QueryType_QUERY_FILES                      QueryType = 10
	QueryType_QUERY_DOWNLOAD_FILE              QueryType = 11
	QueryType_QUERY_ERASE_FILE                 QueryType = 12
	QueryType_QUERY_RESET                      QueryType = 13
	QueryType_QUERY_NETWORK_SETTINGS           QueryType = 14
	QueryType_QUERY_CONFIGURE_NETWORK_SETTINGS QueryType = 15
	QueryType_QUERY_IDENTITY                   QueryType = 16
	QueryType_QUERY_CONFIGURE_IDENTITY         QueryType = 17
	QueryType_QUERY_STATUS                     QueryType = 18
)

var QueryType_name = map[int32]string{
	0:  "QUERY_NONE",
	1:  "QUERY_CAPABILITIES",
	2:  "QUERY_CONFIGURE_SENSOR",
	3:  "QUERY_DATA_SETS",
	4:  "QUERY_DATA_SET",
	5:  "QUERY_DOWNLOAD_DATA_SET",
	6:  "QUERY_ERASE_DATA_SET",
	7:  "QUERY_LIVE_DATA_POLL",
	8:  "QUERY_SCHEDULES",
	9:  "QUERY_CONFIGUE_SCHEDULES",
	10: "QUERY_FILES",
	11: "QUERY_DOWNLOAD_FILE",
	12: "QUERY_ERASE_FILE",
	13: "QUERY_RESET",
	14: "QUERY_NETWORK_SETTINGS",
	15: "QUERY_CONFIGURE_NETWORK_SETTINGS",
	16: "QUERY_IDENTITY",
	17: "QUERY_CONFIGURE_IDENTITY",
	18: "QUERY_STATUS",
}
var QueryType_value = map[string]int32{
	"QUERY_NONE":                       0,
	"QUERY_CAPABILITIES":               1,
	"QUERY_CONFIGURE_SENSOR":           2,
	"QUERY_DATA_SETS":                  3,
	"QUERY_DATA_SET":                   4,
	"QUERY_DOWNLOAD_DATA_SET":          5,
	"QUERY_ERASE_DATA_SET":             6,
	"QUERY_LIVE_DATA_POLL":             7,
	"QUERY_SCHEDULES":                  8,
	"QUERY_CONFIGUE_SCHEDULES":         9,
	"QUERY_FILES":                      10,
	"QUERY_DOWNLOAD_FILE":              11,
	"QUERY_ERASE_FILE":                 12,
	"QUERY_RESET":                      13,
	"QUERY_NETWORK_SETTINGS":           14,
	"QUERY_CONFIGURE_NETWORK_SETTINGS": 15,
	"QUERY_IDENTITY":                   16,
	"QUERY_CONFIGURE_IDENTITY":         17,
	"QUERY_STATUS":                     18,
}

func (x QueryType) String() string {
	return proto.EnumName(QueryType_name, int32(x))
}
func (QueryType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ReplyType int32

const (
	ReplyType_REPLY_NONE              ReplyType = 0
	ReplyType_REPLY_SUCCESS           ReplyType = 1
	ReplyType_REPLY_ERROR             ReplyType = 2
	ReplyType_REPLY_CAPABILITIES      ReplyType = 3
	ReplyType_REPLY_DATA_SETS         ReplyType = 4
	ReplyType_REPLY_DATA_SET          ReplyType = 5
	ReplyType_REPLY_DOWNLOAD_DATA_SET ReplyType = 6
	ReplyType_REPLY_LIVE_DATA_POLL    ReplyType = 7
	ReplyType_REPLY_SCHEDULES         ReplyType = 8
	ReplyType_REPLY_FILES             ReplyType = 9
	ReplyType_REPLY_DOWNLOAD_FILE     ReplyType = 10
	ReplyType_REPLY_RESET             ReplyType = 11
	ReplyType_REPLY_NETWORK_SETTINGS  ReplyType = 12
	ReplyType_REPLY_IDENTITY          ReplyType = 13
	ReplyType_REPLY_STATUS            ReplyType = 14
)

var ReplyType_name = map[int32]string{
	0:  "REPLY_NONE",
	1:  "REPLY_SUCCESS",
	2:  "REPLY_ERROR",
	3:  "REPLY_CAPABILITIES",
	4:  "REPLY_DATA_SETS",
	5:  "REPLY_DATA_SET",
	6:  "REPLY_DOWNLOAD_DATA_SET",
	7:  "REPLY_LIVE_DATA_POLL",
	8:  "REPLY_SCHEDULES",
	9:  "REPLY_FILES",
	10: "REPLY_DOWNLOAD_FILE",
	11: "REPLY_RESET",
	12: "REPLY_NETWORK_SETTINGS",
	13: "REPLY_IDENTITY",
	14: "REPLY_STATUS",
}
var ReplyType_value = map[string]int32{
	"REPLY_NONE":              0,
	"REPLY_SUCCESS":           1,
	"REPLY_ERROR":             2,
	"REPLY_CAPABILITIES":      3,
	"REPLY_DATA_SETS":         4,
	"REPLY_DATA_SET":          5,
	"REPLY_DOWNLOAD_DATA_SET": 6,
	"REPLY_LIVE_DATA_POLL":    7,
	"REPLY_SCHEDULES":         8,
	"REPLY_FILES":             9,
	"REPLY_DOWNLOAD_FILE":     10,
	"REPLY_RESET":             11,
	"REPLY_NETWORK_SETTINGS":  12,
	"REPLY_IDENTITY":          13,
	"REPLY_STATUS":            14,
}

func (x ReplyType) String() string {
	return proto.EnumName(ReplyType_name, int32(x))
}
func (ReplyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type QueryCapabilities struct {
	Version    uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	CallerTime uint32 `protobuf:"varint,2,opt,name=callerTime" json:"callerTime,omitempty"`
}

func (m *QueryCapabilities) Reset()                    { *m = QueryCapabilities{} }
func (m *QueryCapabilities) String() string            { return proto.CompactTextString(m) }
func (*QueryCapabilities) ProtoMessage()               {}
func (*QueryCapabilities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QueryCapabilities) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *QueryCapabilities) GetCallerTime() uint32 {
	if m != nil {
		return m.CallerTime
	}
	return 0
}

type ModuleCapabilities struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ModuleCapabilities) Reset()                    { *m = ModuleCapabilities{} }
func (m *ModuleCapabilities) String() string            { return proto.CompactTextString(m) }
func (*ModuleCapabilities) ProtoMessage()               {}
func (*ModuleCapabilities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ModuleCapabilities) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ModuleCapabilities) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SensorCapabilities struct {
	Id            uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Module        uint32 `protobuf:"varint,2,opt,name=module" json:"module,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Frequency     uint32 `protobuf:"varint,4,opt,name=frequency" json:"frequency,omitempty"`
	UnitOfMeasure string `protobuf:"bytes,5,opt,name=unitOfMeasure" json:"unitOfMeasure,omitempty"`
}

func (m *SensorCapabilities) Reset()                    { *m = SensorCapabilities{} }
func (m *SensorCapabilities) String() string            { return proto.CompactTextString(m) }
func (*SensorCapabilities) ProtoMessage()               {}
func (*SensorCapabilities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SensorCapabilities) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SensorCapabilities) GetModule() uint32 {
	if m != nil {
		return m.Module
	}
	return 0
}

func (m *SensorCapabilities) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SensorCapabilities) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *SensorCapabilities) GetUnitOfMeasure() string {
	if m != nil {
		return m.UnitOfMeasure
	}
	return ""
}

type Capabilities struct {
	Version  uint32                `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	DeviceId []uint32              `protobuf:"varint,2,rep,packed,name=deviceId" json:"deviceId,omitempty"`
	Name     string                `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Modules  []*ModuleCapabilities `protobuf:"bytes,4,rep,name=modules" json:"modules,omitempty"`
	Sensors  []*SensorCapabilities `protobuf:"bytes,5,rep,name=sensors" json:"sensors,omitempty"`
}

func (m *Capabilities) Reset()                    { *m = Capabilities{} }
func (m *Capabilities) String() string            { return proto.CompactTextString(m) }
func (*Capabilities) ProtoMessage()               {}
func (*Capabilities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Capabilities) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Capabilities) GetDeviceId() []uint32 {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *Capabilities) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Capabilities) GetModules() []*ModuleCapabilities {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *Capabilities) GetSensors() []*SensorCapabilities {
	if m != nil {
		return m.Sensors
	}
	return nil
}

type TimeSpec struct {
	Fixed    int32 `protobuf:"varint,1,opt,name=fixed" json:"fixed,omitempty"`
	Interval int32 `protobuf:"varint,2,opt,name=interval" json:"interval,omitempty"`
	Offset   int32 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *TimeSpec) Reset()                    { *m = TimeSpec{} }
func (m *TimeSpec) String() string            { return proto.CompactTextString(m) }
func (*TimeSpec) ProtoMessage()               {}
func (*TimeSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TimeSpec) GetFixed() int32 {
	if m != nil {
		return m.Fixed
	}
	return 0
}

func (m *TimeSpec) GetInterval() int32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *TimeSpec) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type Schedule struct {
	Second *TimeSpec `protobuf:"bytes,1,opt,name=second" json:"second,omitempty"`
	Minute *TimeSpec `protobuf:"bytes,2,opt,name=minute" json:"minute,omitempty"`
	Hour   *TimeSpec `protobuf:"bytes,3,opt,name=hour" json:"hour,omitempty"`
	Day    *TimeSpec `protobuf:"bytes,4,opt,name=day" json:"day,omitempty"`
}

func (m *Schedule) Reset()                    { *m = Schedule{} }
func (m *Schedule) String() string            { return proto.CompactTextString(m) }
func (*Schedule) ProtoMessage()               {}
func (*Schedule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Schedule) GetSecond() *TimeSpec {
	if m != nil {
		return m.Second
	}
	return nil
}

func (m *Schedule) GetMinute() *TimeSpec {
	if m != nil {
		return m.Minute
	}
	return nil
}

func (m *Schedule) GetHour() *TimeSpec {
	if m != nil {
		return m.Hour
	}
	return nil
}

func (m *Schedule) GetDay() *TimeSpec {
	if m != nil {
		return m.Day
	}
	return nil
}

type Schedules struct {
	Readings     *Schedule `protobuf:"bytes,1,opt,name=readings" json:"readings,omitempty"`
	Transmission *Schedule `protobuf:"bytes,2,opt,name=transmission" json:"transmission,omitempty"`
	Status       *Schedule `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Location     *Schedule `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
}

func (m *Schedules) Reset()                    { *m = Schedules{} }
func (m *Schedules) String() string            { return proto.CompactTextString(m) }
func (*Schedules) ProtoMessage()               {}
func (*Schedules) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Schedules) GetReadings() *Schedule {
	if m != nil {
		return m.Readings
	}
	return nil
}

func (m *Schedules) GetTransmission() *Schedule {
	if m != nil {
		return m.Transmission
	}
	return nil
}

func (m *Schedules) GetStatus() *Schedule {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Schedules) GetLocation() *Schedule {
	if m != nil {
		return m.Location
	}
	return nil
}

type NetworkInfo struct {
	Ssid     string `protobuf:"bytes,1,opt,name=ssid" json:"ssid,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *NetworkInfo) Reset()                    { *m = NetworkInfo{} }
func (m *NetworkInfo) String() string            { return proto.CompactTextString(m) }
func (*NetworkInfo) ProtoMessage()               {}
func (*NetworkInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *NetworkInfo) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *NetworkInfo) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type NetworkSettings struct {
	CreateAccessPoint int32          `protobuf:"varint,1,opt,name=createAccessPoint" json:"createAccessPoint,omitempty"`
	Networks          []*NetworkInfo `protobuf:"bytes,2,rep,name=networks" json:"networks,omitempty"`
}

func (m *NetworkSettings) Reset()                    { *m = NetworkSettings{} }
func (m *NetworkSettings) String() string            { return proto.CompactTextString(m) }
func (*NetworkSettings) ProtoMessage()               {}
func (*NetworkSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NetworkSettings) GetCreateAccessPoint() int32 {
	if m != nil {
		return m.CreateAccessPoint
	}
	return 0
}

func (m *NetworkSettings) GetNetworks() []*NetworkInfo {
	if m != nil {
		return m.Networks
	}
	return nil
}

type Identity struct {
	Device   string   `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	Stream   string   `protobuf:"bytes,2,opt,name=stream" json:"stream,omitempty"`
	DeviceId []uint32 `protobuf:"varint,3,rep,packed,name=deviceId" json:"deviceId,omitempty"`
}

func (m *Identity) Reset()                    { *m = Identity{} }
func (m *Identity) String() string            { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()               {}
func (*Identity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Identity) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *Identity) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *Identity) GetDeviceId() []uint32 {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

type ConfigureSensorQuery struct {
	Id        uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Frequency uint32 `protobuf:"varint,2,opt,name=frequency" json:"frequency,omitempty"`
}

func (m *ConfigureSensorQuery) Reset()                    { *m = ConfigureSensorQuery{} }
func (m *ConfigureSensorQuery) String() string            { return proto.CompactTextString(m) }
func (*ConfigureSensorQuery) ProtoMessage()               {}
func (*ConfigureSensorQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ConfigureSensorQuery) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ConfigureSensorQuery) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

type QueryDataSets struct {
}

func (m *QueryDataSets) Reset()                    { *m = QueryDataSets{} }
func (m *QueryDataSets) String() string            { return proto.CompactTextString(m) }
func (*QueryDataSets) ProtoMessage()               {}
func (*QueryDataSets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type DataSet struct {
	Id     uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Sensor uint32 `protobuf:"varint,2,opt,name=sensor" json:"sensor,omitempty"`
	Time   uint64 `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	Size   uint32 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Pages  uint32 `protobuf:"varint,5,opt,name=pages" json:"pages,omitempty"`
	Hash   uint32 `protobuf:"varint,6,opt,name=hash" json:"hash,omitempty"`
	Name   string `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
}

func (m *DataSet) Reset()                    { *m = DataSet{} }
func (m *DataSet) String() string            { return proto.CompactTextString(m) }
func (*DataSet) ProtoMessage()               {}
func (*DataSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DataSet) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DataSet) GetSensor() uint32 {
	if m != nil {
		return m.Sensor
	}
	return 0
}

func (m *DataSet) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *DataSet) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *DataSet) GetPages() uint32 {
	if m != nil {
		return m.Pages
	}
	return 0
}

func (m *DataSet) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *DataSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// TODO: Paging?
type DataSets struct {
	DataSets []*DataSet `protobuf:"bytes,1,rep,name=dataSets" json:"dataSets,omitempty"`
}

func (m *DataSets) Reset()                    { *m = DataSets{} }
func (m *DataSets) String() string            { return proto.CompactTextString(m) }
func (*DataSets) ProtoMessage()               {}
func (*DataSets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DataSets) GetDataSets() []*DataSet {
	if m != nil {
		return m.DataSets
	}
	return nil
}

type DownloadDataSet struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Page uint32 `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
}

func (m *DownloadDataSet) Reset()                    { *m = DownloadDataSet{} }
func (m *DownloadDataSet) String() string            { return proto.CompactTextString(m) }
func (*DownloadDataSet) ProtoMessage()               {}
func (*DownloadDataSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DownloadDataSet) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DownloadDataSet) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type Sample struct {
	Time  uint64  `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value" json:"value,omitempty"`
}

func (m *Sample) Reset()                    { *m = Sample{} }
func (m *Sample) String() string            { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()               {}
func (*Sample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Sample) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Sample) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type DataSetData struct {
	Time    uint64    `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Page    uint32    `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
	Sensor  uint32    `protobuf:"varint,3,opt,name=sensor" json:"sensor,omitempty"`
	Samples []*Sample `protobuf:"bytes,4,rep,name=samples" json:"samples,omitempty"`
	Floats  []float32 `protobuf:"fixed32,5,rep,packed,name=floats" json:"floats,omitempty"`
	Data    []byte    `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Hash    uint32    `protobuf:"varint,7,opt,name=hash" json:"hash,omitempty"`
}

func (m *DataSetData) Reset()                    { *m = DataSetData{} }
func (m *DataSetData) String() string            { return proto.CompactTextString(m) }
func (*DataSetData) ProtoMessage()               {}
func (*DataSetData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DataSetData) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *DataSetData) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *DataSetData) GetSensor() uint32 {
	if m != nil {
		return m.Sensor
	}
	return 0
}

func (m *DataSetData) GetSamples() []*Sample {
	if m != nil {
		return m.Samples
	}
	return nil
}

func (m *DataSetData) GetFloats() []float32 {
	if m != nil {
		return m.Floats
	}
	return nil
}

func (m *DataSetData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DataSetData) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

type LiveDataPoll struct {
	Interval uint32 `protobuf:"varint,1,opt,name=interval" json:"interval,omitempty"`
}

func (m *LiveDataPoll) Reset()                    { *m = LiveDataPoll{} }
func (m *LiveDataPoll) String() string            { return proto.CompactTextString(m) }
func (*LiveDataPoll) ProtoMessage()               {}
func (*LiveDataPoll) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *LiveDataPoll) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type LiveDataSample struct {
	Sensor uint32  `protobuf:"varint,1,opt,name=sensor" json:"sensor,omitempty"`
	Time   uint64  `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Value  float32 `protobuf:"fixed32,3,opt,name=value" json:"value,omitempty"`
}

func (m *LiveDataSample) Reset()                    { *m = LiveDataSample{} }
func (m *LiveDataSample) String() string            { return proto.CompactTextString(m) }
func (*LiveDataSample) ProtoMessage()               {}
func (*LiveDataSample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *LiveDataSample) GetSensor() uint32 {
	if m != nil {
		return m.Sensor
	}
	return 0
}

func (m *LiveDataSample) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *LiveDataSample) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type LiveData struct {
	Samples []*LiveDataSample `protobuf:"bytes,1,rep,name=samples" json:"samples,omitempty"`
}

func (m *LiveData) Reset()                    { *m = LiveData{} }
func (m *LiveData) String() string            { return proto.CompactTextString(m) }
func (*LiveData) ProtoMessage()               {}
func (*LiveData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *LiveData) GetSamples() []*LiveDataSample {
	if m != nil {
		return m.Samples
	}
	return nil
}

type QueryDataSet struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *QueryDataSet) Reset()                    { *m = QueryDataSet{} }
func (m *QueryDataSet) String() string            { return proto.CompactTextString(m) }
func (*QueryDataSet) ProtoMessage()               {}
func (*QueryDataSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *QueryDataSet) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type EraseDataSet struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *EraseDataSet) Reset()                    { *m = EraseDataSet{} }
func (m *EraseDataSet) String() string            { return proto.CompactTextString(m) }
func (*EraseDataSet) ProtoMessage()               {}
func (*EraseDataSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *EraseDataSet) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type File struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Time    uint64 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Size    uint32 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Pages   uint32 `protobuf:"varint,4,opt,name=pages" json:"pages,omitempty"`
	Version uint32 `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	Name    string `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *File) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *File) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *File) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *File) GetPages() uint32 {
	if m != nil {
		return m.Pages
	}
	return 0
}

func (m *File) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Files struct {
	Files []*File `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
}

func (m *Files) Reset()                    { *m = Files{} }
func (m *Files) String() string            { return proto.CompactTextString(m) }
func (*Files) ProtoMessage()               {}
func (*Files) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Files) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

type DownloadFile struct {
	Id       uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Page     uint32 `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
	PageSize uint32 `protobuf:"varint,3,opt,name=pageSize" json:"pageSize,omitempty"`
	Token    []byte `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *DownloadFile) Reset()                    { *m = DownloadFile{} }
func (m *DownloadFile) String() string            { return proto.CompactTextString(m) }
func (*DownloadFile) ProtoMessage()               {}
func (*DownloadFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DownloadFile) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DownloadFile) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *DownloadFile) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *DownloadFile) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

type EraseFile struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *EraseFile) Reset()                    { *m = EraseFile{} }
func (m *EraseFile) String() string            { return proto.CompactTextString(m) }
func (*EraseFile) ProtoMessage()               {}
func (*EraseFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *EraseFile) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FileData struct {
	Page  uint32 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Size  uint32 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Hash  uint32 `protobuf:"varint,4,opt,name=hash" json:"hash,omitempty"`
	Token []byte `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *FileData) Reset()                    { *m = FileData{} }
func (m *FileData) String() string            { return proto.CompactTextString(m) }
func (*FileData) ProtoMessage()               {}
func (*FileData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *FileData) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *FileData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FileData) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileData) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *FileData) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

type DeviceStatus struct {
	Uptime            uint32  `protobuf:"varint,1,opt,name=uptime" json:"uptime,omitempty"`
	BatteryPercentage float32 `protobuf:"fixed32,2,opt,name=batteryPercentage" json:"batteryPercentage,omitempty"`
	BatteryVoltage    float32 `protobuf:"fixed32,3,opt,name=batteryVoltage" json:"batteryVoltage,omitempty"`
	GpsHasFix         uint32  `protobuf:"varint,4,opt,name=gpsHasFix" json:"gpsHasFix,omitempty"`
	GpsSatellites     uint32  `protobuf:"varint,5,opt,name=gpsSatellites" json:"gpsSatellites,omitempty"`
}

func (m *DeviceStatus) Reset()                    { *m = DeviceStatus{} }
func (m *DeviceStatus) String() string            { return proto.CompactTextString(m) }
func (*DeviceStatus) ProtoMessage()               {}
func (*DeviceStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *DeviceStatus) GetUptime() uint32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *DeviceStatus) GetBatteryPercentage() float32 {
	if m != nil {
		return m.BatteryPercentage
	}
	return 0
}

func (m *DeviceStatus) GetBatteryVoltage() float32 {
	if m != nil {
		return m.BatteryVoltage
	}
	return 0
}

func (m *DeviceStatus) GetGpsHasFix() uint32 {
	if m != nil {
		return m.GpsHasFix
	}
	return 0
}

func (m *DeviceStatus) GetGpsSatellites() uint32 {
	if m != nil {
		return m.GpsSatellites
	}
	return 0
}

type WireMessageQuery struct {
	Type              QueryType             `protobuf:"varint,1,opt,name=type,enum=fk_app.QueryType" json:"type,omitempty"`
	QueryCapabilities *QueryCapabilities    `protobuf:"bytes,2,opt,name=queryCapabilities" json:"queryCapabilities,omitempty"`
	ConfigureSensor   *ConfigureSensorQuery `protobuf:"bytes,3,opt,name=configureSensor" json:"configureSensor,omitempty"`
	QueryDataSets     *QueryDataSets        `protobuf:"bytes,4,opt,name=queryDataSets" json:"queryDataSets,omitempty"`
	QueryDataSet      *QueryDataSet         `protobuf:"bytes,5,opt,name=queryDataSet" json:"queryDataSet,omitempty"`
	DownloadDataSet   *DownloadDataSet      `protobuf:"bytes,6,opt,name=downloadDataSet" json:"downloadDataSet,omitempty"`
	EraseDataSet      *EraseDataSet         `protobuf:"bytes,7,opt,name=eraseDataSet" json:"eraseDataSet,omitempty"`
	LiveDataPoll      *LiveDataPoll         `protobuf:"bytes,8,opt,name=liveDataPoll" json:"liveDataPoll,omitempty"`
	NewSchedules      *Schedules            `protobuf:"bytes,9,opt,name=newSchedules" json:"newSchedules,omitempty"`
	DownloadFile      *DownloadFile         `protobuf:"bytes,10,opt,name=downloadFile" json:"downloadFile,omitempty"`
	EraseFile         *EraseFile            `protobuf:"bytes,11,opt,name=eraseFile" json:"eraseFile,omitempty"`
	NetworkSettings   *NetworkSettings      `protobuf:"bytes,12,opt,name=networkSettings" json:"networkSettings,omitempty"`
	Identity          *Identity             `protobuf:"bytes,13,opt,name=identity" json:"identity,omitempty"`
}

func (m *WireMessageQuery) Reset()                    { *m = WireMessageQuery{} }
func (m *WireMessageQuery) String() string            { return proto.CompactTextString(m) }
func (*WireMessageQuery) ProtoMessage()               {}
func (*WireMessageQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *WireMessageQuery) GetType() QueryType {
	if m != nil {
		return m.Type
	}
	return QueryType_QUERY_NONE
}

func (m *WireMessageQuery) GetQueryCapabilities() *QueryCapabilities {
	if m != nil {
		return m.QueryCapabilities
	}
	return nil
}

func (m *WireMessageQuery) GetConfigureSensor() *ConfigureSensorQuery {
	if m != nil {
		return m.ConfigureSensor
	}
	return nil
}

func (m *WireMessageQuery) GetQueryDataSets() *QueryDataSets {
	if m != nil {
		return m.QueryDataSets
	}
	return nil
}

func (m *WireMessageQuery) GetQueryDataSet() *QueryDataSet {
	if m != nil {
		return m.QueryDataSet
	}
	return nil
}

func (m *WireMessageQuery) GetDownloadDataSet() *DownloadDataSet {
	if m != nil {
		return m.DownloadDataSet
	}
	return nil
}

func (m *WireMessageQuery) GetEraseDataSet() *EraseDataSet {
	if m != nil {
		return m.EraseDataSet
	}
	return nil
}

func (m *WireMessageQuery) GetLiveDataPoll() *LiveDataPoll {
	if m != nil {
		return m.LiveDataPoll
	}
	return nil
}

func (m *WireMessageQuery) GetNewSchedules() *Schedules {
	if m != nil {
		return m.NewSchedules
	}
	return nil
}

func (m *WireMessageQuery) GetDownloadFile() *DownloadFile {
	if m != nil {
		return m.DownloadFile
	}
	return nil
}

func (m *WireMessageQuery) GetEraseFile() *EraseFile {
	if m != nil {
		return m.EraseFile
	}
	return nil
}

func (m *WireMessageQuery) GetNetworkSettings() *NetworkSettings {
	if m != nil {
		return m.NetworkSettings
	}
	return nil
}

func (m *WireMessageQuery) GetIdentity() *Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

type Error struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type WireMessageReply struct {
	Type            ReplyType        `protobuf:"varint,1,opt,name=type,enum=fk_app.ReplyType" json:"type,omitempty"`
	Errors          []*Error         `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
	Capabilities    *Capabilities    `protobuf:"bytes,3,opt,name=capabilities" json:"capabilities,omitempty"`
	DataSets        *DataSets        `protobuf:"bytes,4,opt,name=dataSets" json:"dataSets,omitempty"`
	DataSetData     *DataSetData     `protobuf:"bytes,5,opt,name=dataSetData" json:"dataSetData,omitempty"`
	LiveData        *LiveData        `protobuf:"bytes,6,opt,name=liveData" json:"liveData,omitempty"`
	Schedules       *Schedules       `protobuf:"bytes,7,opt,name=schedules" json:"schedules,omitempty"`
	Files           *Files           `protobuf:"bytes,8,opt,name=files" json:"files,omitempty"`
	FileData        *FileData        `protobuf:"bytes,9,opt,name=fileData" json:"fileData,omitempty"`
	NetworkSettings *NetworkSettings `protobuf:"bytes,10,opt,name=networkSettings" json:"networkSettings,omitempty"`
	Identity        *Identity        `protobuf:"bytes,11,opt,name=identity" json:"identity,omitempty"`
	Status          *DeviceStatus    `protobuf:"bytes,12,opt,name=status" json:"status,omitempty"`
}

func (m *WireMessageReply) Reset()                    { *m = WireMessageReply{} }
func (m *WireMessageReply) String() string            { return proto.CompactTextString(m) }
func (*WireMessageReply) ProtoMessage()               {}
func (*WireMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *WireMessageReply) GetType() ReplyType {
	if m != nil {
		return m.Type
	}
	return ReplyType_REPLY_NONE
}

func (m *WireMessageReply) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *WireMessageReply) GetCapabilities() *Capabilities {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *WireMessageReply) GetDataSets() *DataSets {
	if m != nil {
		return m.DataSets
	}
	return nil
}

func (m *WireMessageReply) GetDataSetData() *DataSetData {
	if m != nil {
		return m.DataSetData
	}
	return nil
}

func (m *WireMessageReply) GetLiveData() *LiveData {
	if m != nil {
		return m.LiveData
	}
	return nil
}

func (m *WireMessageReply) GetSchedules() *Schedules {
	if m != nil {
		return m.Schedules
	}
	return nil
}

func (m *WireMessageReply) GetFiles() *Files {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *WireMessageReply) GetFileData() *FileData {
	if m != nil {
		return m.FileData
	}
	return nil
}

func (m *WireMessageReply) GetNetworkSettings() *NetworkSettings {
	if m != nil {
		return m.NetworkSettings
	}
	return nil
}

func (m *WireMessageReply) GetIdentity() *Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *WireMessageReply) GetStatus() *DeviceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryCapabilities)(nil), "fk_app.QueryCapabilities")
	proto.RegisterType((*ModuleCapabilities)(nil), "fk_app.ModuleCapabilities")
	proto.RegisterType((*SensorCapabilities)(nil), "fk_app.SensorCapabilities")
	proto.RegisterType((*Capabilities)(nil), "fk_app.Capabilities")
	proto.RegisterType((*TimeSpec)(nil), "fk_app.TimeSpec")
	proto.RegisterType((*Schedule)(nil), "fk_app.Schedule")
	proto.RegisterType((*Schedules)(nil), "fk_app.Schedules")
	proto.RegisterType((*NetworkInfo)(nil), "fk_app.NetworkInfo")
	proto.RegisterType((*NetworkSettings)(nil), "fk_app.NetworkSettings")
	proto.RegisterType((*Identity)(nil), "fk_app.Identity")
	proto.RegisterType((*ConfigureSensorQuery)(nil), "fk_app.ConfigureSensorQuery")
	proto.RegisterType((*QueryDataSets)(nil), "fk_app.QueryDataSets")
	proto.RegisterType((*DataSet)(nil), "fk_app.DataSet")
	proto.RegisterType((*DataSets)(nil), "fk_app.DataSets")
	proto.RegisterType((*DownloadDataSet)(nil), "fk_app.DownloadDataSet")
	proto.RegisterType((*Sample)(nil), "fk_app.Sample")
	proto.RegisterType((*DataSetData)(nil), "fk_app.DataSetData")
	proto.RegisterType((*LiveDataPoll)(nil), "fk_app.LiveDataPoll")
	proto.RegisterType((*LiveDataSample)(nil), "fk_app.LiveDataSample")
	proto.RegisterType((*LiveData)(nil), "fk_app.LiveData")
	proto.RegisterType((*QueryDataSet)(nil), "fk_app.QueryDataSet")
	proto.RegisterType((*EraseDataSet)(nil), "fk_app.EraseDataSet")
	proto.RegisterType((*File)(nil), "fk_app.File")
	proto.RegisterType((*Files)(nil), "fk_app.Files")
	proto.RegisterType((*DownloadFile)(nil), "fk_app.DownloadFile")
	proto.RegisterType((*EraseFile)(nil), "fk_app.EraseFile")
	proto.RegisterType((*FileData)(nil), "fk_app.FileData")
	proto.RegisterType((*DeviceStatus)(nil), "fk_app.DeviceStatus")
	proto.RegisterType((*WireMessageQuery)(nil), "fk_app.WireMessageQuery")
	proto.RegisterType((*Error)(nil), "fk_app.Error")
	proto.RegisterType((*WireMessageReply)(nil), "fk_app.WireMessageReply")
	proto.RegisterEnum("fk_app.QueryType", QueryType_name, QueryType_value)
	proto.RegisterEnum("fk_app.ReplyType", ReplyType_name, ReplyType_value)
}

func init() { proto.RegisterFile("fk-app.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0x4f, 0x6f, 0xdb, 0xc8,
	0x15, 0xaf, 0xfe, 0x4b, 0x4f, 0x94, 0x44, 0x4f, 0x5c, 0x87, 0xcd, 0x06, 0x8b, 0x94, 0xcd, 0x16,
	0x46, 0x36, 0xcd, 0x16, 0xee, 0x06, 0x5d, 0xa0, 0xed, 0x41, 0xb5, 0xe8, 0xac, 0x50, 0x45, 0xf2,
	0x0e, 0xe5, 0x04, 0x7b, 0x0a, 0x18, 0x71, 0xe4, 0x10, 0xa6, 0x49, 0x86, 0x43, 0xd9, 0xeb, 0x1e,
	0x7b, 0xed, 0xb5, 0x40, 0xbf, 0x42, 0xbf, 0x41, 0xaf, 0x3d, 0x14, 0x28, 0x7a, 0x2b, 0xd0, 0x2f,
	0x54, 0xcc, 0x3f, 0x92, 0x43, 0xd1, 0x6d, 0x81, 0x3d, 0x99, 0xef, 0xbd, 0xdf, 0x9b, 0xf9, 0xcd,
	0xfb, 0x37, 0x23, 0x83, 0xb1, 0xbd, 0xfa, 0x99, 0x97, 0x24, 0x2f, 0x92, 0x34, 0xce, 0x62, 0xd4,
	0xdd, 0x5e, 0xbd, 0xf3, 0x92, 0xc4, 0x7e, 0x0d, 0x07, 0xdf, 0xec, 0x48, 0x7a, 0x77, 0xea, 0x25,
	0xde, 0xfb, 0x20, 0x0c, 0xb2, 0x80, 0x50, 0x64, 0x41, 0xef, 0x86, 0xa4, 0x34, 0x88, 0x23, 0xab,
	0xf1, 0xa4, 0x71, 0x3c, 0xc2, 0x4a, 0x44, 0x9f, 0x02, 0x6c, 0xbc, 0x30, 0x24, 0xe9, 0x3a, 0xb8,
	0x26, 0x56, 0x93, 0x1b, 0x4b, 0x1a, 0xfb, 0x2b, 0x40, 0xaf, 0x63, 0x7f, 0x17, 0x12, 0x6d, 0xbd,
	0x31, 0x34, 0x03, 0x5f, 0x2e, 0xd5, 0x0c, 0x7c, 0x84, 0xa0, 0x1d, 0x79, 0xd2, 0x7f, 0x80, 0xf9,
	0xb7, 0xfd, 0xa7, 0x06, 0x20, 0x97, 0x44, 0x34, 0x4e, 0xff, 0xab, 0xeb, 0x11, 0x74, 0xaf, 0xf9,
	0x06, 0x72, 0x73, 0x29, 0xe5, 0x4b, 0xb6, 0x8a, 0x25, 0xd1, 0x63, 0x18, 0x6c, 0x53, 0xf2, 0x71,
	0x47, 0xa2, 0xcd, 0x9d, 0xd5, 0xe6, 0xf0, 0x42, 0x81, 0x9e, 0xc2, 0x68, 0x17, 0x05, 0xd9, 0x6a,
	0xfb, 0x9a, 0x78, 0x74, 0x97, 0x12, 0xab, 0xc3, 0x5d, 0x75, 0xa5, 0xfd, 0xf7, 0x06, 0x18, 0xff,
	0x67, 0x6c, 0x1e, 0x41, 0xdf, 0x27, 0x37, 0xc1, 0x86, 0xcc, 0x7d, 0xab, 0xf9, 0xa4, 0x75, 0x3c,
	0xc2, 0xb9, 0x5c, 0x4b, 0xef, 0x4b, 0xe8, 0x09, 0xf2, 0xd4, 0x6a, 0x3f, 0x69, 0x1d, 0x0f, 0x4f,
	0x1e, 0xbd, 0x10, 0x49, 0x79, 0xb1, 0x1f, 0x42, 0xac, 0xa0, 0xcc, 0x8b, 0xf2, 0x30, 0x51, 0xab,
	0xa3, 0x7b, 0xed, 0x47, 0x0f, 0x2b, 0xa8, 0xbd, 0x86, 0x3e, 0xcb, 0x8f, 0x9b, 0x90, 0x0d, 0x3a,
	0x84, 0xce, 0x36, 0xf8, 0x8e, 0x88, 0xa8, 0x76, 0xb0, 0x10, 0x18, 0xfb, 0x20, 0xca, 0x48, 0x7a,
	0xe3, 0x85, 0x3c, 0xb4, 0x1d, 0x9c, 0xcb, 0x2c, 0xe8, 0xf1, 0x76, 0x4b, 0x49, 0xc6, 0xf9, 0x77,
	0xb0, 0x94, 0xec, 0xbf, 0x34, 0xa0, 0xef, 0x6e, 0x3e, 0x10, 0x9e, 0x81, 0x63, 0xe8, 0x52, 0xb2,
	0x89, 0x23, 0xb1, 0xee, 0xf0, 0xc4, 0x54, 0xbc, 0xd4, 0xc6, 0x58, 0xda, 0x19, 0xf2, 0x3a, 0x88,
	0x76, 0x99, 0xc8, 0x61, 0x2d, 0x52, 0xd8, 0xd1, 0x53, 0x68, 0x7f, 0x88, 0x77, 0x29, 0xdf, 0xb6,
	0x0e, 0xc7, 0xad, 0xc8, 0x86, 0x96, 0xef, 0x89, 0x0c, 0xd7, 0x81, 0x98, 0xd1, 0xfe, 0x47, 0x03,
	0x06, 0x8a, 0x2a, 0x45, 0xcf, 0xa1, 0x9f, 0x12, 0xcf, 0x0f, 0xa2, 0x4b, 0x5a, 0x65, 0xab, 0x40,
	0x38, 0x47, 0xa0, 0x2f, 0xc1, 0xc8, 0x52, 0x2f, 0xa2, 0xd7, 0x01, 0xe5, 0x79, 0x6f, 0xde, 0xe3,
	0xa1, 0xa1, 0x78, 0x3c, 0x32, 0x2f, 0xdb, 0xd1, 0x2a, 0xfb, 0x1c, 0x2f, 0xed, 0x8c, 0x4d, 0x18,
	0x6f, 0xbc, 0x8c, 0xad, 0xdd, 0xbe, 0x8f, 0x8d, 0x42, 0xd8, 0xbf, 0x81, 0xe1, 0x92, 0x64, 0xb7,
	0x71, 0x7a, 0x35, 0x8f, 0xb6, 0x31, 0xab, 0x2c, 0x4a, 0x65, 0x8b, 0x0c, 0x30, 0xff, 0x66, 0xb9,
	0x4c, 0x3c, 0x4a, 0x6f, 0xe3, 0xd4, 0x97, 0x3d, 0x96, 0xcb, 0x76, 0x02, 0x13, 0xe9, 0xee, 0x92,
	0x2c, 0xe3, 0xe7, 0x7b, 0x0e, 0x07, 0x9b, 0x94, 0x78, 0x19, 0x99, 0x6e, 0x36, 0x84, 0xd2, 0xf3,
	0x38, 0x88, 0x32, 0x59, 0x1c, 0xfb, 0x06, 0xf4, 0x05, 0xf4, 0x23, 0xb1, 0x00, 0xe5, 0x65, 0x3e,
	0x3c, 0x79, 0xa0, 0xd8, 0x96, 0x78, 0xe1, 0x1c, 0x64, 0xbf, 0x81, 0xfe, 0xdc, 0x27, 0x51, 0x16,
	0x64, 0x77, 0xac, 0x92, 0x44, 0x4f, 0x48, 0xbe, 0x52, 0x62, 0x7a, 0x9a, 0xa5, 0xc4, 0xbb, 0x96,
	0x7c, 0xa5, 0xa4, 0xf5, 0x54, 0x4b, 0xef, 0x29, 0x7b, 0x06, 0x87, 0xa7, 0x71, 0xb4, 0x0d, 0x2e,
	0x77, 0x29, 0x11, 0xb5, 0xcf, 0x27, 0xd9, 0xde, 0xc8, 0xd0, 0xc6, 0x40, 0xb3, 0x32, 0x06, 0xec,
	0x09, 0x8c, 0xb8, 0xdb, 0xcc, 0xcb, 0x3c, 0x97, 0x64, 0xd4, 0xfe, 0x73, 0x03, 0x7a, 0x52, 0xa8,
	0x9b, 0x3e, 0xa2, 0xa3, 0xd4, 0xf4, 0x11, 0x12, 0x4b, 0x42, 0x16, 0xc8, 0xf6, 0x6e, 0x63, 0xfe,
	0xcd, 0x13, 0x13, 0xfc, 0x9e, 0xc8, 0xc1, 0xc3, 0xbf, 0x59, 0xeb, 0x25, 0xde, 0x25, 0xa1, 0x7c,
	0xd6, 0x8c, 0xb0, 0x10, 0x18, 0xf2, 0x83, 0x47, 0x3f, 0x58, 0x5d, 0x81, 0x64, 0xdf, 0xf9, 0xc0,
	0xe8, 0x95, 0x46, 0xe4, 0x2f, 0xa1, 0xaf, 0x58, 0xa2, 0xcf, 0xa1, 0xef, 0xcb, 0x6f, 0xab, 0xc1,
	0xb3, 0x30, 0x51, 0x59, 0x90, 0x18, 0x9c, 0x03, 0xec, 0x97, 0x30, 0x99, 0xc5, 0xb7, 0x51, 0x18,
	0x7b, 0xfe, 0x7d, 0x27, 0x43, 0xd0, 0x66, 0x64, 0xe4, 0xb9, 0xf8, 0xb7, 0x7d, 0x02, 0x5d, 0xd7,
	0xbb, 0x4e, 0xc4, 0x74, 0xe5, 0xe7, 0x6b, 0x94, 0xce, 0x77, 0x08, 0x9d, 0x1b, 0x2f, 0xdc, 0x09,
	0x97, 0x26, 0x16, 0x82, 0xfd, 0xd7, 0x06, 0x0c, 0xe5, 0x1e, 0xec, 0x4f, 0xad, 0x67, 0xcd, 0x5e,
	0xa5, 0xc8, 0xb6, 0xb4, 0xc8, 0x1e, 0x43, 0x8f, 0x72, 0x0e, 0x6a, 0x48, 0x8e, 0xf3, 0xd6, 0xe0,
	0x6a, 0xac, 0xcc, 0x6c, 0x85, 0x6d, 0x18, 0x7b, 0x99, 0x98, 0x8b, 0x4d, 0x2c, 0x25, 0xb6, 0x1b,
	0x0b, 0x04, 0x8f, 0xae, 0x81, 0xf9, 0x77, 0x1e, 0xf1, 0x5e, 0x11, 0x71, 0xfb, 0x19, 0x18, 0x8b,
	0xe0, 0x86, 0x30, 0xd6, 0xe7, 0x71, 0x18, 0x6a, 0x03, 0x51, 0xc4, 0x29, 0x97, 0x6d, 0x0c, 0x63,
	0x85, 0x95, 0x11, 0x2a, 0xf8, 0x37, 0x6a, 0x2b, 0xa3, 0x59, 0x17, 0xb9, 0x56, 0x39, 0x72, 0xbf,
	0x86, 0xbe, 0x5a, 0x13, 0xfd, 0xbc, 0x38, 0xb5, 0x48, 0xee, 0x91, 0x3a, 0xb5, 0xbe, 0x6d, 0x7e,
	0x7a, 0xfb, 0x53, 0x30, 0xca, 0x65, 0x5c, 0xcd, 0x2f, 0xb3, 0x3b, 0xa9, 0x47, 0xc9, 0x7d, 0xf6,
	0x3f, 0x34, 0xa0, 0x7d, 0x16, 0x84, 0xa4, 0xae, 0x30, 0xf6, 0x0e, 0xa0, 0x4a, 0xbb, 0x55, 0x57,
	0xda, 0xed, 0x72, 0x69, 0x97, 0x6e, 0xcb, 0x8e, 0x7e, 0x5b, 0xaa, 0x02, 0xef, 0x96, 0x0a, 0xfc,
	0x73, 0xe8, 0x30, 0x0e, 0x14, 0xd9, 0xec, 0x8a, 0x2a, 0x4e, 0x6f, 0xa8, 0xd3, 0x33, 0x2b, 0x16,
	0x26, 0xdb, 0x07, 0x43, 0x15, 0xf5, 0x7d, 0xc4, 0xf7, 0xaa, 0x8c, 0x0f, 0xc6, 0x4b, 0xe2, 0x16,
	0xe4, 0x73, 0x99, 0x1d, 0x20, 0x8b, 0xaf, 0x88, 0x18, 0xc1, 0x06, 0x16, 0x82, 0xfd, 0x09, 0x0c,
	0x78, 0xdc, 0xea, 0xb6, 0xb0, 0x13, 0xe8, 0x33, 0xbd, 0x2a, 0x74, 0xbe, 0x5d, 0xa3, 0xb4, 0x9d,
	0x2a, 0xbd, 0xa6, 0x5e, 0x7a, 0x7b, 0xb1, 0x53, 0xe5, 0xd8, 0x2e, 0x0d, 0x80, 0x9c, 0x4e, 0xa7,
	0x4c, 0xe7, 0x6f, 0x0d, 0x30, 0x66, 0x7c, 0x00, 0xba, 0xe2, 0xee, 0x38, 0x82, 0xee, 0x2e, 0xc9,
	0x3b, 0x6c, 0x84, 0xa5, 0xc4, 0x66, 0xfa, 0x7b, 0x2f, 0xcb, 0x48, 0x7a, 0x77, 0x4e, 0xd2, 0x0d,
	0x89, 0x32, 0x15, 0x8a, 0x26, 0xde, 0x37, 0xa0, 0x9f, 0xc2, 0x58, 0x2a, 0xdf, 0xc4, 0x21, 0x87,
	0x8a, 0xd2, 0xac, 0x68, 0xd9, 0x28, 0xbd, 0x4c, 0xe8, 0xd7, 0x1e, 0x3d, 0x0b, 0xbe, 0x53, 0x2f,
	0xaa, 0x5c, 0xc1, 0x5e, 0x54, 0x97, 0x09, 0x75, 0xbd, 0x8c, 0x84, 0x61, 0x90, 0xe5, 0x53, 0x4e,
	0x57, 0xda, 0x7f, 0xec, 0x82, 0xf9, 0x36, 0x48, 0xc9, 0x6b, 0x42, 0xa9, 0x77, 0x49, 0xc4, 0xcc,
	0xfe, 0x0c, 0xda, 0xd9, 0x5d, 0x22, 0x0e, 0x31, 0x3e, 0x39, 0x50, 0xf9, 0xe6, 0xc6, 0xf5, 0x5d,
	0x42, 0x30, 0x37, 0xa3, 0x57, 0x70, 0xf0, 0xb1, 0xfa, 0x5a, 0x95, 0xd7, 0xf1, 0x8f, 0x34, 0x1f,
	0xed, 0x15, 0xb4, 0xef, 0x83, 0xce, 0x60, 0xb2, 0xd1, 0xef, 0x0e, 0x79, 0x4b, 0x3f, 0x56, 0xcb,
	0xd4, 0x5d, 0x2d, 0xb8, 0xea, 0x84, 0x7e, 0x05, 0xa3, 0x8f, 0xe5, 0xdb, 0x43, 0xde, 0xdf, 0x3f,
	0xd4, 0xc8, 0x28, 0x23, 0xd6, 0xb1, 0xe8, 0x2b, 0x30, 0xca, 0x0a, 0x1e, 0xae, 0xe1, 0xc9, 0x61,
	0x9d, 0x2f, 0xd6, 0x90, 0x68, 0x0a, 0x13, 0x5f, 0x1f, 0xe8, 0xbc, 0x8f, 0x86, 0x27, 0x0f, 0xf3,
	0x4b, 0x40, 0x37, 0xe3, 0x2a, 0x9e, 0x6d, 0x4e, 0x4a, 0x03, 0x81, 0x8f, 0xc2, 0xd2, 0xe6, 0xe5,
	0x61, 0x81, 0x35, 0x24, 0xf3, 0x0c, 0x4b, 0x83, 0xd2, 0xea, 0xeb, 0x9e, 0xe5, 0x21, 0x8a, 0x35,
	0x24, 0x7a, 0x09, 0x46, 0x44, 0x6e, 0xf3, 0x67, 0x98, 0x35, 0xe0, 0x9e, 0x07, 0xd5, 0xc7, 0x0e,
	0xc5, 0x1a, 0x8c, 0x6d, 0xe8, 0x97, 0x3a, 0xdd, 0x02, 0x7d, 0xc3, 0xf2, 0x14, 0xc0, 0x1a, 0x12,
	0x7d, 0x01, 0x03, 0xa2, 0xba, 0xd7, 0x1a, 0xea, 0xbb, 0xe5, 0x6d, 0x8d, 0x0b, 0x0c, 0x0b, 0x6c,
	0xa4, 0xbf, 0x8e, 0x2c, 0x43, 0x0f, 0x6c, 0xe5, 0xf1, 0x84, 0xab, 0x78, 0xf6, 0x9a, 0x0b, 0xe4,
	0x73, 0xc7, 0x1a, 0xe9, 0xaf, 0x39, 0xf5, 0x0c, 0xc2, 0x39, 0xc2, 0xfe, 0x31, 0x74, 0x9c, 0x34,
	0x8d, 0x53, 0x36, 0x29, 0xaf, 0x45, 0x47, 0xc8, 0xa7, 0x91, 0x12, 0xed, 0x7f, 0xb5, 0xb5, 0x86,
	0xc1, 0x24, 0x09, 0xef, 0x6d, 0x18, 0x6e, 0x2c, 0x35, 0xcc, 0x67, 0xd0, 0x25, 0x6c, 0x79, 0xf5,
	0x54, 0x1b, 0x15, 0xa7, 0x4f, 0xe3, 0x14, 0x4b, 0x23, 0x8b, 0xf0, 0xa6, 0xdc, 0x52, 0x2d, 0x3d,
	0xc2, 0x5a, 0x37, 0x69, 0x48, 0x76, 0x5a, 0x5f, 0xaf, 0x7d, 0xb3, 0xf2, 0x0e, 0xa1, 0xc5, 0x43,
	0x04, 0xbd, 0x84, 0xa1, 0x5f, 0x3c, 0x0e, 0x64, 0xc1, 0x3f, 0xa8, 0x38, 0xb0, 0x3f, 0xb8, 0x8c,
	0xe3, 0x0f, 0x64, 0x59, 0x47, 0xb2, 0xce, 0xcd, 0x6a, 0xb5, 0xe1, 0x1c, 0xc1, 0x92, 0x4e, 0xf3,
	0x12, 0xeb, 0xdd, 0x57, 0x62, 0x05, 0x06, 0xfd, 0x44, 0xdd, 0x36, 0xa2, 0x92, 0x47, 0xe5, 0xdb,
	0x86, 0xca, 0xeb, 0x86, 0x71, 0xd8, 0xca, 0x59, 0x2f, 0xeb, 0xd6, 0x2c, 0xe3, 0x04, 0x07, 0x85,
	0xa8, 0xab, 0x23, 0xf8, 0x1e, 0x75, 0x34, 0xfc, 0x5f, 0x75, 0x84, 0x9e, 0xe7, 0xbf, 0x36, 0x8c,
	0x4a, 0x77, 0x94, 0x6e, 0x0b, 0xf5, 0x8b, 0xe3, 0xd9, 0xbf, 0x5b, 0x30, 0xc8, 0x67, 0x2b, 0x1a,
	0x03, 0x7c, 0x73, 0xe1, 0xe0, 0x6f, 0xdf, 0x2d, 0x57, 0x4b, 0xc7, 0xfc, 0x01, 0x3a, 0x02, 0x24,
	0xe4, 0xd3, 0xe9, 0xf9, 0xf4, 0xb7, 0xf3, 0xc5, 0x7c, 0x3d, 0x77, 0x5c, 0xb3, 0x81, 0x1e, 0xc1,
	0x91, 0xd4, 0xaf, 0x96, 0x67, 0xf3, 0x57, 0x17, 0xd8, 0x79, 0xe7, 0x3a, 0x4b, 0x77, 0x85, 0xcd,
	0x26, 0x7a, 0x00, 0x13, 0x61, 0x9b, 0x4d, 0xd7, 0xd3, 0x77, 0xae, 0xb3, 0x76, 0xcd, 0x16, 0x42,
	0x30, 0xd6, 0x95, 0x66, 0x1b, 0x7d, 0x02, 0x0f, 0xa5, 0x6e, 0xf5, 0x76, 0xb9, 0x58, 0x4d, 0x67,
	0x85, 0xb1, 0x83, 0x2c, 0x38, 0x14, 0x46, 0x07, 0x4f, 0x5d, 0xa7, 0xb0, 0x74, 0x0b, 0xcb, 0x62,
	0xfe, 0x46, 0x1a, 0xce, 0x57, 0x8b, 0x85, 0xd9, 0x2b, 0x76, 0x76, 0x4f, 0xbf, 0x76, 0x66, 0x17,
	0x0b, 0xc7, 0x35, 0xfb, 0xe8, 0x31, 0x58, 0x1a, 0x55, 0xa7, 0x64, 0x1d, 0xa0, 0x09, 0x0c, 0x85,
	0xf5, 0x6c, 0xce, 0x14, 0x80, 0x1e, 0xc2, 0x83, 0x0a, 0x29, 0x66, 0x31, 0x87, 0xe8, 0x10, 0xcc,
	0x32, 0x21, 0xae, 0x35, 0x0a, 0x7f, 0xec, 0x30, 0x76, 0xa3, 0x22, 0x32, 0x4b, 0x67, 0xfd, 0x76,
	0x85, 0x7f, 0xc7, 0x48, 0xaf, 0xe7, 0xcb, 0x57, 0xae, 0x39, 0x46, 0x4f, 0xe1, 0x49, 0x35, 0x6a,
	0x7b, 0xa8, 0x49, 0x11, 0xaa, 0xf9, 0xcc, 0x59, 0xae, 0xe7, 0xeb, 0x6f, 0x4d, 0x73, 0xef, 0x10,
	0xd8, 0x29, 0xac, 0x07, 0xc8, 0x04, 0x43, 0x9e, 0x7b, 0x3d, 0x5d, 0x5f, 0xb8, 0x26, 0x7a, 0xf6,
	0xcf, 0x26, 0x0c, 0xf2, 0x01, 0xc0, 0xb2, 0x8a, 0x9d, 0xf3, 0x45, 0x9e, 0xd5, 0x03, 0x18, 0x09,
	0xd9, 0xbd, 0x38, 0x3d, 0x75, 0x5c, 0x96, 0xd0, 0x09, 0x0c, 0x85, 0xca, 0xc1, 0x98, 0x67, 0xf1,
	0x08, 0x90, 0x50, 0x68, 0x99, 0x6f, 0xb1, 0x18, 0x0b, 0x7d, 0x91, 0xdd, 0x36, 0xa3, 0xac, 0x2b,
	0xcd, 0x0e, 0xcb, 0xae, 0xd4, 0xed, 0x65, 0x97, 0xe7, 0x50, 0x18, 0xeb, 0x72, 0x28, 0xb9, 0x95,
	0x72, 0x98, 0xb3, 0x13, 0x59, 0x1a, 0xb0, 0x2c, 0x55, 0x16, 0xe7, 0xf9, 0x80, 0x02, 0x29, 0xf2,
	0x31, 0x64, 0xf9, 0x90, 0x67, 0xaf, 0x46, 0xda, 0x28, 0x68, 0xe7, 0xb1, 0x1c, 0xb1, 0x58, 0xca,
	0xfd, 0x45, 0x2c, 0xc7, 0xef, 0xbb, 0xfc, 0xdf, 0x64, 0xbf, 0xf8, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x2e, 0xc5, 0x25, 0xaa, 0x36, 0x13, 0x00, 0x00,
}
